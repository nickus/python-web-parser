#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import time
import logging
import sys
import os
from typing import List
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.models.optimized_material import (
    OptimizedMaterial, OptimizedPriceListItem, OptimizedSearchResult,
    MaterialCategory, Currency, create_optimized_material, create_optimized_price_list_item
)

from src.services.optimized_similarity_service import (
    OptimizedSimilarityService, SimilarityConfig, SimilarityWeights,
    SimilarityAlgorithm, MatchingStrategy, create_similarity_service
)

from src.architecture.scalable_patterns import (
    MaterialMatchingApplicationService, create_application_service,
    application_service_context, LoggingObserver, MetricsObserver
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def create_sample_materials() -> List[OptimizedMaterial]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    materials = [
        create_optimized_material(
            id="mat_001",
            name="–ö–∞–±–µ–ª—å –í–í–ì 3x2.5",
            description="–°–∏–ª–æ–≤–æ–π –∫–∞–±–µ–ª—å –í–í–ì 3x2.5 –º–º¬≤",
            category="cables",
            brand="–¢–≠–õ–ó",
            unit="–º",
            specifications={"voltage": "0.66–∫–í", "cores": 3, "cross_section": "2.5–º–º¬≤"}
        ),
        
        create_optimized_material(
            id="mat_002", 
            name="–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–∞–º–ø–∞ 10–í—Ç E27",
            description="LED –ª–∞–º–ø–∞ 10W —Ü–æ–∫–æ–ª—å E27 —Ç–µ–ø–ª—ã–π –±–µ–ª—ã–π",
            category="lighting",
            brand="Philips",
            unit="—à—Ç",
            specifications={"power": "10W", "base": "E27", "color_temp": "3000K"}
        ),
        
        create_optimized_material(
            id="mat_003",
            name="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –°16",
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å 16–ê —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –°",
            category="automation", 
            brand="ABB",
            unit="—à—Ç",
            specifications={"current": "16–ê", "characteristic": "C", "poles": 1}
        ),
        
        create_optimized_material(
            id="mat_004",
            name="–ü—Ä–æ–≤–æ–¥ –ü–í–° 2x1.5",
            description="–ü—Ä–æ–≤–æ–¥ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ü–í–° 2x1.5",
            category="cables",
            brand="–†—ã–±–∏–Ω—Å–∫–∫–∞–±–µ–ª—å",
            unit="–º", 
            specifications={"cores": 2, "cross_section": "1.5–º–º¬≤"}
        ),
        
        create_optimized_material(
            id="mat_005",
            name="–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π LED 36–í—Ç",
            description="–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ 36W",
            category="lighting",
            brand="Gauss",
            unit="—à—Ç",
            specifications={"power": "36W", "type": "ceiling", "ip_rating": "IP20"}
        )
    ]
    
    return materials


def create_sample_price_items() -> List[OptimizedPriceListItem]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    
    price_items = [
        create_optimized_price_list_item(
            id="price_001",
            material_name="–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –í–í–ì 3—Ö2,5",
            description="–ö–∞–±–µ–ª—å –í–í–ì 3x2.5 –º–º¬≤ –º–µ–¥–Ω—ã–π",
            price=Decimal("85.50"),
            currency="RUB",
            supplier="–≠–ª–µ–∫—Ç—Ä–æ–¢–æ—Ä–≥",
            category="cables",
            brand="–¢–≠–õ–ó",
            unit="–º",
            specifications={"voltage": "660–í", "cores": 3, "section": "2.5"}
        ),
        
        create_optimized_price_list_item(
            id="price_002",
            material_name="–õ–∞–º–ø–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è 10W E27",
            description="LED –ª–∞–º–ø–∞ 10 –í–∞—Ç—Ç —Å —Ü–æ–∫–æ–ª–µ–º E27",
            price=Decimal("120.00"),
            currency="RUB", 
            supplier="–°–≤–µ—Ç–û–ø—Ç–¢–æ—Ä–≥",
            category="lighting",
            brand="Philips",
            unit="—à—Ç",
            specifications={"power": "10W", "socket": "E27", "temp": "3000–ö"}
        ),
        
        create_optimized_price_list_item(
            id="price_003",
            material_name="–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π 16–ê –°",
            description="–ê–≤—Ç–æ–º–∞—Ç 16 –ê–º–ø–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ C –æ–¥–Ω–æ–ø–æ–ª—é—Å–Ω—ã–π",
            price=Decimal("450.00"),
            currency="RUB",
            supplier="–≠–ª–µ–∫—Ç—Ä–æ–ö–æ–º–ø–ª–µ–∫—Ç",
            category="automation",
            brand="ABB",
            unit="—à—Ç",
            specifications={"current": "16–ê", "char": "C", "pole": "1–ü"}
        ),
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        create_optimized_price_list_item(
            id="price_004",
            material_name="–í–í–ì –∫–∞–±–µ–ª—å 3*2,5–º–º2",
            description="–°–∏–ª–æ–≤–æ–π –∫–∞–±–µ–ª—å –í–í–ì —Å–µ—á–µ–Ω–∏–µ–º 3x2.5",
            price=Decimal("82.00"),
            currency="RUB",
            supplier="–ö–∞–±–µ–ª—å–ü—Ä–æ–º",
            category="cables",
            unit="–º"
        ),
        
        create_optimized_price_list_item(
            id="price_005",
            material_name="–ü—Ä–æ–≤–æ–¥ –ü–í–° 2—Ö1,5–º–º2",
            description="–ü–í–° –ø—Ä–æ–≤–æ–¥ 2 –∂–∏–ª—ã –ø–æ 1.5 –∫–≤.–º–º",
            price=Decimal("45.30"),
            currency="RUB",
            supplier="–≠–ª–µ–∫—Ç—Ä–æ—Å–≤—è–∑—å",
            category="cables",
            brand="–†—ã–±–∏–Ω—Å–∫–∫–∞–±–µ–ª—å",
            unit="–º"
        ),
        
        create_optimized_price_list_item(
            id="price_006",
            material_name="–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ LED –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π 36–í—Ç",
            description="–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π LED —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –º–æ—â–Ω–æ—Å—Ç—å—é 36W",
            price=Decimal("1250.00"),
            currency="RUB",
            supplier="–°–≤–µ—Ç–ü—Ä–æ—Ñ–∏",
            category="lighting",
            brand="Gauss",
            unit="—à—Ç"
        )
    ]
    
    return price_items


async def demonstrate_basic_matching():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º"""
    
    logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    materials = create_sample_materials()
    price_items = create_sample_price_items()
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ {len(price_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    similarity_service = create_similarity_service(
        strategy=MatchingStrategy.HYBRID,
        max_workers=4,
        enable_caching=True
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    start_time = time.time()
    
    results = similarity_service.batch_similarity(
        materials=materials,
        price_items=price_items,
        min_similarity=30.0
    )
    
    elapsed_time = (time.time() - start_time) * 1000
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {elapsed_time:.1f}–º—Å")
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 80)
    
    for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        print(f"{i:2d}. –ú–∞—Ç–µ—Ä–∏–∞–ª: {result.material.name}")
        print(f"    –ü—Ä–∞–π—Å:    {result.price_item.material_name}")
        print(f"    –°—Ö–æ–¥—Å—Ç–≤–æ: {result.similarity_percentage:.1f}% ({result.match_grade})")
        print(f"    –¶–µ–Ω–∞:     {result.price_item.formatted_price()}")
        print(f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {result.price_item.supplier}")
        
        # –î–µ—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        details = []
        for field, score in result.similarity_details.items():
            if score > 0:
                details.append(f"{field}:{score:.0f}%")
        print(f"    –î–µ—Ç–∞–ª–∏:   {', '.join(details)}")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    stats = similarity_service.get_performance_stats()
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 50)
    print(f"Cache hit rate:      {stats['cache_hit_rate']:.1f}%")
    print(f"–í—ã—á–∏—Å–ª–µ–Ω–∏–π –≤—Å–µ–≥–æ:    {stats['total_computations']}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:       {stats['average_computation_time_ms']:.2f}–º—Å")
    print(f"–†–∞–∑–º–µ—Ä –∫–µ—à–∞:         {stats['cache_size']}")
    print()


async def demonstrate_advanced_patterns():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º application service —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    async with application_service_context(
        enable_circuit_breaker=True
    ) as app_service:
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logging_observer = LoggingObserver()
        metrics_observer = MetricsObserver()
        
        app_service.event_emitter.subscribe(logging_observer)
        app_service.event_emitter.subscribe(metrics_observer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º—É
        materials = create_sample_materials()
        for material in materials:
            await app_service.add_material(material)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
        price_items = create_sample_price_items()
        for item in price_items:
            await app_service.add_price_item(item)
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        strategies = ["exact", "fuzzy", "hybrid"]
        
        for strategy_name in strategies:
            print(f"\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{strategy_name}'")
            
            start_time = time.time()
            
            results = await app_service.match_materials(
                strategy_name=strategy_name
            )
            
            elapsed_time = (time.time() - start_time) * 1000
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∑–∞ {elapsed_time:.1f}–º—Å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results:
                best_match = max(results, key=lambda r: r.similarity_percentage)
                print(f"   –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_match.similarity_percentage:.1f}%")
                print(f"   '{best_match.material.name}' -> '{best_match.price_item.material_name}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
        print("\nüìä –°–û–ë–†–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print("=" * 40)
        
        metrics = metrics_observer.get_metrics()
        for event_type, events in metrics.items():
            print(f"{event_type}: {len(events)} —Å–æ–±—ã—Ç–∏–π")
            if events and isinstance(events[0], dict):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
                latest = events[-1]
                for key, value in latest.items():
                    print(f"  {key}: {value}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: {len(app_service.get_command_history())} –∫–æ–º–∞–Ω–¥")
        for i, command_desc in enumerate(app_service.get_command_history(), 1):
            print(f"  {i}. {command_desc}")


async def demonstrate_performance_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    logger.info("=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    materials = []
    for i in range(50):  # 50 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        materials.append(create_optimized_material(
            id=f"perf_mat_{i:03d}",
            name=f"–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª {i}",
            description=f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–æ–º–µ—Ä {i}",
            category=MaterialCategory.GENERAL,
            specifications={"test_param": i, "category_id": i % 5}
        ))
    
    price_items = []
    for i in range(200):  # 200 –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞  
        price_items.append(create_optimized_price_list_item(
            id=f"perf_price_{i:03d}",
            material_name=f"–ü—Ä–∞–π—Å –ø–æ–∑–∏—Ü–∏—è {i}",
            description=f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {i}",
            price=Decimal(str(100 + i * 5)),
            currency=Currency.RUB,
            supplier=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {i % 10}"
        ))
    
    print(f"üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ √ó {len(price_items)} –ø—Ä–∞–π—Å-–ø–æ–∑–∏—Ü–∏–π")
    print(f"   –í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {len(materials) * len(price_items):,}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    configs = {
        "–ë–∞–∑–æ–≤–∞—è": SimilarityConfig(
            max_workers=1,
            enable_caching=False,
            use_parallel=False
        ),
        "–° –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º": SimilarityConfig(
            max_workers=1,
            enable_caching=True,
            use_parallel=False
        ),
        "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è": SimilarityConfig(
            max_workers=4,
            enable_caching=True,
            use_parallel=True
        )
    }
    
    results = {}
    
    for config_name, config in configs.items():
        print(f"\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_name}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        service = OptimizedSimilarityService(config)
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        matches = service.batch_similarity(
            materials=materials,
            price_items=price_items,
            min_similarity=20.0
        )
        
        elapsed_time = (time.time() - start_time) * 1000
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = service.get_performance_stats()
        
        results[config_name] = {
            'time_ms': elapsed_time,
            'matches': len(matches),
            'stats': stats
        }
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed_time:.1f}–º—Å")
        print(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        print(f"   üíæ Cache hit rate: {stats['cache_hit_rate']:.1f}%")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print(f"\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 70)
    print(f"{'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è':<15} {'–í—Ä–µ–º—è (–º—Å)':<12} {'–°–æ–≤–ø–∞–¥–µ–Ω–∏—è':<12} {'Cache Hit %':<12}")
    print("-" * 70)
    
    baseline_time = results["–ë–∞–∑–æ–≤–∞—è"]["time_ms"]
    
    for config_name, result in results.items():
        speedup = baseline_time / result["time_ms"] if result["time_ms"] > 0 else 0
        speedup_text = f"({speedup:.1f}x)" if speedup > 1 else ""
        
        print(f"{config_name:<15} {result['time_ms']:<12.1f} {result['matches']:<12} "
              f"{result['stats']['cache_hit_rate']:<12.1f} {speedup_text}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 80)
    print()
    
    try:
        # 1. –ë–∞–∑–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        await demonstrate_basic_matching()
        
        print("\n" + "="*80 + "\n")
        
        # 2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        await demonstrate_advanced_patterns()
        
        print("\n" + "="*80 + "\n")
        
        # 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await demonstrate_performance_comparison()
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(main())