#!/usr/bin/env python3
"""
End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è main.py
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
"""

import subprocess
import json
import sys
import time
from pathlib import Path


def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*70}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
    print('='*70)

    result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8')

    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print("STDERR:", result.stderr, file=sys.stderr)

    return result.returncode, result.stdout, result.stderr


def test_connection():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""
    print("\nüìå –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch")

    code, stdout, stderr = run_command(['venv/bin/python', 'main.py', '--check-connection'])

    if code == 0 and "[OK] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å–ø–µ—à–Ω–æ" in stdout:
        print("‚úÖ Elasticsearch –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Elasticsearch")
        return False


def test_search_cable():
    """–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–±–µ–ª—è"""
    print("\nüìå –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –∫–∞–±–µ–ª—è –ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70")

    test_cases = [
        # –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        "–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70–º–∫(PE)-1 –¢–†–¢–° –ö–∞–±—ç–∫—Å",
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        "–ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70",
        # –ü–æ–∏—Å–∫ —Å –æ—à–∏–±–∫–æ–π –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏
        "–ö–∞–±–µ–ª—å –ü–ü–ì–Ω–≥ FRHF 1x70"
    ]

    for query in test_cases:
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        code, stdout, stderr = run_command([
            'venv/bin/python', 'main.py',
            '--search-material', query,
            '--top-n', '3'
        ])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if "–ù–∞–π–¥–µ–Ω–æ" in stdout and "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π" in stdout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            checks = {
                "ID:": "ID –ø–æ–∑–∏—Ü–∏–∏",
                "–ë—Ä–µ–Ω–¥/–ü–æ—Å—Ç–∞–≤—â–∏–∫:": "–ë—Ä–µ–Ω–¥",
                "–ü–æ—Ö–æ–∂–µ—Å—Ç—å:": "–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏",
                "1—Ö70": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–±–µ–ª—è"
            }

            for check, desc in checks.items():
                if check in stdout:
                    print(f"  ‚úÖ {desc} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"  ‚ö†Ô∏è {desc} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –Ω–∞—à–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if "1—Ö95" in stdout or "1x95" in stdout:
                print("  ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–±–µ–ª—è (1—Ö95)")
        else:
            print("  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def test_search_slabotochka():
    """–¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    print("\nüìå –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    test_cases = [
        ("RS-485", "RS-485"),
        ("–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä DTM 12–í", "DTM"),
        ("–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –†—É–±–µ–∂-–ë–ò–£ R3", "R3"),
        ("FireSec", "FIRESEC")
    ]

    for query, expected_model in test_cases:
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        code, stdout, stderr = run_command([
            'venv/bin/python', 'main.py',
            '--search-material', query,
            '--top-n', '2'
        ])

        if expected_model.upper() in stdout.upper():
            print(f"  ‚úÖ –ú–æ–¥–µ–ª—å {expected_model} –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print(f"  ‚ùå –ú–æ–¥–µ–ª—å {expected_model} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")


def test_search_by_id():
    """–¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ ID –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    print("\nüìå –¢–ï–°–¢ 4: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞")

    # ID –∫–∞–±–µ–ª—è –∏–∑ catalog.json
    test_ids = [
        ("9994067", "–ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70–º–∫(PE)-1"),  # –ö–∞–±–µ–ª—å –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        ("308804", "–ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70–º–∫(PE)"),     # –î—Ä—É–≥–æ–π –∫–∞–±–µ–ª—å 1—Ö70
    ]

    for item_id, expected_name in test_ids:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        if Path('catalog.json').exists():
            with open('catalog.json', 'r', encoding='utf-8') as f:
                catalog = json.load(f)

            item = next((x for x in catalog if str(x.get('id')) == item_id), None)
            if item:
                name = item.get('name', '')
                print(f"\nüîç –ü–æ–∏—Å–∫ ID {item_id}: '{name}'")

                code, stdout, stderr = run_command([
                    'venv/bin/python', 'main.py',
                    '--search-material', name,
                    '--top-n', '5'
                ])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
                if f"ID: {item_id}" in stdout:
                    print(f"  ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID {item_id}")
                elif expected_name in stdout:
                    print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Ç–æ–≤–∞—Ä, –Ω–æ –¥—Ä—É–≥–æ–π ID")
                else:
                    print(f"  ‚ùå –¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def test_price_availability():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–µ–Ω"""
    print("\nüìå –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ —Ü–µ–Ω")

    # –ò—â–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–Ω—ã
    queries = [
        "–ö–∞–±–µ–ª—å –í–í–ì–ù–ì",
        "–ê–≤—Ç–æ–º–∞—Ç ABB",
        "–†–æ–∑–µ—Ç–∫–∞ Legrand"
    ]

    for query in queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        code, stdout, stderr = run_command([
            'venv/bin/python', 'main.py',
            '--search-material', query,
            '--top-n', '1'
        ])

        if "–¶–µ–Ω–∞:" in stdout:
            if "–¶–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞" in stdout:
                print("  ‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
            else:
                print("  ‚úÖ –¶–µ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("  ‚ùå –ü–æ–ª–µ —Ü–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–≤–æ–¥–µ")


def test_performance():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞"""
    print("\nüìå –¢–ï–°–¢ 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")

    queries = [
        "–ö–∞–±–µ–ª—å",
        "–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ LED",
        "–ê–≤—Ç–æ–º–∞—Ç –∑–∞—â–∏—Ç—ã",
        "RS-485",
        "–ü–ü–ì–Ω–≥(–ê)-FRHF"
    ]

    times = []
    for query in queries:
        start = time.time()
        code, stdout, stderr = run_command([
            'venv/bin/python', 'main.py',
            '--search-material', query,
            '--top-n', '10'
        ])
        elapsed = time.time() - start
        times.append(elapsed)
        print(f"  –ü–æ–∏—Å–∫ '{query[:20]}...': {elapsed:.2f} —Å–µ–∫")

    avg_time = sum(times) / len(times)
    print(f"\n  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {avg_time:.2f} —Å–µ–∫")

    if avg_time < 3:
        print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è (< 3 —Å–µ–∫)")
    elif avg_time < 5:
        print("  ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è (< 5 —Å–µ–∫)")
    else:
        print("  ‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è (> 5 —Å–µ–∫)")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤"""
    print("="*70)
    print("END-TO-END –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ï–ó main.py")
    print("="*70)

    results = {}

    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_connection():
        results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else:
        results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch"] = "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print("\n‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:8.15.1")
        return

    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∫–∞–±–µ–ª—è
    test_search_cable()
    results["–ü–æ–∏—Å–∫ –∫–∞–±–µ–ª–µ–π"] = "‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"

    # –¢–µ—Å—Ç 3: –°–ª–∞–±–æ—Ç–æ—á–∫–∞
    test_search_slabotochka()
    results["–ü–æ–∏—Å–∫ —Å–ª–∞–±–æ—Ç–æ—á–∫–∏"] = "‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"

    # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ ID
    test_search_by_id()
    results["–ü–æ–∏—Å–∫ –ø–æ ID"] = "‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"

    # –¢–µ—Å—Ç 5: –¶–µ–Ω—ã
    test_price_availability()
    results["–í—ã–≤–æ–¥ —Ü–µ–Ω"] = "‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"

    # –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    test_performance()
    results["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"] = "‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ E2E –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)

    for test_name, status in results.items():
        print(f"{test_name}: {status}")

    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ catalog.json –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Elasticsearch")
    print("2. –î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: venv/bin/python main.py --setup --price-list catalog.json")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ material_matcher.log –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö")


if __name__ == "__main__":
    main()