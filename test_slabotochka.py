#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ RS-485, DTM, FireSec, R3 –∏ —Ç.–¥.
"""

import sys
import os
import time
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp
from src.models.material import Material, PriceListItem
from src.services.fast_similarity_service import FastSimilarityService


def test_model_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\n=== –¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ===")

    service = FastSimilarityService()

    test_cases = [
        ("–ü—Ä–∏–±–æ—Ä –ø—Ä–∏–µ–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π. RS-485", {"RS-485"}),
        ("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 24/2.5 RS-R3 2x17 –ë–† –°–µ—Ä–∏—è 3", {"RS-R3"}),
        ("–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä DTM 12–í 17–ê—á", {"DTM", "12–í 17–ê–ß"}),
        ("–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†—É–±–µ–∂-–ë–ò–£ R3", {"R3", "–†–£–ë–ï–ñ"}),
        ("–ú–æ–¥—É–ª—å —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è R3-Link", {"R3-LINK"}),
        ("–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 3x2.5", {"3X2.5"}),
        ("–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ë–ê47-35-3—Ö40/10-20 C5", {}),
        ("FireSec-Pro R3 –º–æ–¥—É–ª—å", {"FIRESEC", "R3"}),
    ]

    for text, expected in test_cases:
        models = service._extract_models(text)
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        models_upper = {m.upper() for m in models}

        print(f"\n–¢–µ–∫—Å—Ç: {text}")
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: {models_upper}")
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞
        if expected and models_upper:
            intersection = expected & models_upper
            if intersection:
                print("‚úÖ –ú–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∏ —Ç–æ—á–Ω–æ, –Ω–æ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ")
        elif not expected and not models_upper:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –º–æ–¥–µ–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–ª–∏—Å—å")
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def test_slabotochka_matching():
    """–¢–µ—Å—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–ï–°–¢ 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ===")

    config = {
        "elasticsearch": {
            "host": "localhost",
            "port": 9200,
            "bulk_size": 1000,
            "max_workers": 4
        },
        "matching": {
            "similarity_threshold": 20.0,
            "max_results_per_material": 5
        }
    }

    app = MaterialMatcherApp(config)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–∞–±–æ—Ç–æ—á–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    test_materials = [
        Material(
            id="1",
            name="–ü—Ä–∏–±–æ—Ä –ø—Ä–∏–µ–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π. RS-485",
            equipment_code="–†—É–±–µ–∂-2–û–ü –ø—Ä–æ—Ç.R3",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        ),
        Material(
            id="2",
            name="–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 24/2.5 RS-R3 2x17 –ë–† –°–µ—Ä–∏—è 3",
            equipment_code="24/2.5 RS-R3 2x17 –ë–†",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        ),
        Material(
            id="3",
            name="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä DTM 12–í 26–ê—á",
            equipment_code="DTM 1226",
            manufacturer="Delta"
        ),
        Material(
            id="4",
            name="–ü—É–ª—å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏—è",
            equipment_code="–†–ó-–†—É–±–µ–∂-–ü–î–£-–ü–¢",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        ),
        Material(
            id="5",
            name="–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†—É–±–µ–∂-–ë–ò–£ R3",
            equipment_code="–†—É–±–µ–∂-–ë–ò–£ R3",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        ),
        Material(
            id="6",
            name="–ú–æ–¥—É–ª—å —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è R3-Link",
            equipment_code="R3-–ú–°-–ï",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        ),
        Material(
            id="7",
            name="–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π, –º–æ—â–Ω–æ—Å—Ç—å 18 –∫–í—Ç",
            equipment_code="–®–£–ù/–í-18-03-R3",
            manufacturer="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)"
        )
    ]

    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ catalog.json
    test_price_items = [
        PriceListItem(
            id="p1",
            name="–ü—Ä–∏–±–æ—Ä –ø—Ä–∏–µ–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –æ—Ö—Ä–∞–Ω–Ω–æ-–ø–æ–∂–∞—Ä–Ω—ã–π –Ø—Ö–æ–Ω—Ç-4–ò –∏—Å–ø.03 —Å –ê–ö–ë, RS-485",
            article="8784030004",
            brand="–°–ø–µ—Ü–ø—Ä–∏–±–æ—Ä-–∫–æ–º–ø–ª–µ–∫—Ç",
            description="–° –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º RS-485"
        ),
        PriceListItem(
            id="p2",
            name="–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, R3-Link.",
            article="R3-–†—É–±–µ–∂-–ë–ò–£ –°–ï–†–ò–Ø 3",
            brand="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)",
            description="–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –†—É–±–µ–∂"
        ),
        PriceListItem(
            id="p3",
            name="–ú–µ—Ç–∫–∞ –∞–¥—Ä–µ—Å–Ω–∞—è.",
            article="–ê–ú-4-R3 –°–ï–†–ò–Ø 3",
            brand="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)",
            description="–ê–¥—Ä–µ—Å–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã R3"
        ),
        PriceListItem(
            id="p4",
            name="–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π, –º–æ—â–Ω–æ—Å—Ç—å 11 –∫–í—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ 00",
            article="–®–£–ó-11-00-R3 (IP54)",
            brand="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)",
            description="–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π"
        ),
        PriceListItem(
            id="p5",
            name="–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π, –æ–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π, –º–æ—â–Ω–æ—Å—Ç—å 1,5 –∫–í—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ 03",
            article="–®–£–ù/–í-–û-1,5-03-R3 (IP54)",
            brand="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)",
            description="–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –æ–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π"
        ),
        PriceListItem(
            id="p6",
            name="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä DTM 12–í 26–ê—á",
            article="DTM 1226",
            brand="Delta",
            description="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è 12–í 26–ê—á"
        ),
        PriceListItem(
            id="p7",
            name="–ö–∞–±–µ–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π ITK RS-485 1—Ö2—Ö0.6 –Ω–≥(–ê)-LS —Å–µ—Ä—ã–π (200–º)",
            article="RC3-RS485-01-SF-2101",
            brand="ITK (IEK)",
            description="–ö–∞–±–µ–ª—å –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ RS-485"
        ),
        PriceListItem(
            id="p8",
            name="–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–Ω—ã–π",
            article="–ú–ü–¢-1-–ò–ö–ó-R3",
            brand="Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)",
            description="–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ–º —Å –∏–∑–æ–ª—è—Ç–æ—Ä–æ–º –ö–ó"
        )
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Elasticsearch
    if not app.es_service.check_connection():
        print("‚ö†Ô∏è Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ Elasticsearch...")

        # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastSimilarityService
        similarity_service = FastSimilarityService()

        print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ---")
        for material in test_materials[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            print(f"\nüì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material.name}")
            print(f"   –ö–æ–¥: {material.equipment_code}")

            best_match = None
            best_score = 0

            for price_item in test_price_items:
                score, details = similarity_service.calculate_fast_similarity(
                    material, price_item, use_cache=True
                )

                if score > best_score:
                    best_score = score
                    best_match = price_item

            if best_match:
                print(f"\n   ‚úÖ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_match.name}")
                print(f"      –ê—Ä—Ç–∏–∫—É–ª: {best_match.article}")
                print(f"      –°—Ö–æ–∂–µ—Å—Ç—å: {best_score:.1f}%")
            else:
                print(f"   ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Elasticsearch
    print("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Elasticsearch...")
    app.setup_indices()
    app.es_service.index_price_list_optimized(test_price_items)
    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é

    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ---")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    for material in test_materials:
        print(f"\nüì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material.name}")
        print(f"   –ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {material.equipment_code}")

        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        results = app.search_material_by_name(material.name, top_n=3)

        if results:
            print("   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
            for i, result in enumerate(results[:3], 1):
                price_item = result.get('price_item', {})
                similarity = result.get('similarity_percentage', 0)
                details = result.get('similarity_details', {})

                print(f"\n   {i}. {price_item.get('name', 'N/A')}")
                print(f"      –ê—Ä—Ç–∏–∫—É–ª: {price_item.get('article', 'N/A')}")
                print(f"      –ë—Ä–µ–Ω–¥: {price_item.get('brand', 'N/A')}")
                print(f"      –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1f}%")
                print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {details.get('name', 0):.1f}%")
                print(f"      - –ê—Ä—Ç–∏–∫—É–ª: {details.get('article', 0):.1f}%")
                print(f"      - –ë—Ä–µ–Ω–¥: {details.get('brand', 0):.1f}%")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                if "RS-485" in material.name and "RS-485" in price_item.get('name', ''):
                    print("      ‚úÖ RS-485 –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω")
                elif "DTM" in material.name and "DTM" in price_item.get('article', ''):
                    print("      ‚úÖ DTM –º–æ–¥–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
                elif "R3" in material.equipment_code and "R3" in price_item.get('article', ''):
                    print("      ‚úÖ R3 –º–æ–¥–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
        else:
            print("   ‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return True


def test_cable_matching():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–µ–ª–µ–π —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    print("\n=== –¢–ï–°–¢ 3: –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞–±–µ–ª–µ–π ===")

    similarity_service = FastSimilarityService()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–±–µ–ª–∏
    material_1x70 = Material(
        id="k1",
        name="–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1x70",
        equipment_code="–ü–ü–ì–Ω–≥(–ê)-FRHF 1x70",
        manufacturer="–ö–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥"
    )

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    price_1x70 = PriceListItem(
        id="p1",
        name="–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1x70 —á–µ—Ä–Ω—ã–π",
        article="–ü–ü–ì–Ω–≥(–ê)-FRHF 1x70",
        brand="–ö–∞–±–µ–ª—å–ü—Ä–æ"
    )

    price_1x95 = PriceListItem(
        id="p2",
        name="–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1x95 —á–µ—Ä–Ω—ã–π",
        article="–ü–ü–ì–Ω–≥(–ê)-FRHF 1x95",
        brand="–ö–∞–±–µ–ª—å–ü—Ä–æ"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    score_70, details_70 = similarity_service.calculate_fast_similarity(
        material_1x70, price_1x70, use_cache=False
    )

    score_95, details_95 = similarity_service.calculate_fast_similarity(
        material_1x70, price_1x95, use_cache=False
    )

    print(f"\n–ö–∞–±–µ–ª—å 1x70 -> 1x70: {score_70:.1f}%")
    print(f"–ö–∞–±–µ–ª—å 1x70 -> 1x95: {score_95:.1f}%")

    if score_70 > score_95:
        print("‚úÖ –£–°–ü–ï–•: –ö–∞–±–µ–ª—å 1x70 –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å 1x70, –∞ –Ω–µ —Å 1x95")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ö–∞–±–µ–ª—å 1x70 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è")

    return score_70 > score_95


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–ê–ë–û–¢–û–ß–ù–û–ì–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    results = {}

    # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    test_model_extraction()
    results["–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"] = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"

    # –¢–µ—Å—Ç 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ—Ç–æ—á–∫–∏
    try:
        test_slabotochka_matching()
        results["–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ—Ç–æ—á–∫–∏"] = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        results["–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ—Ç–æ—á–∫–∏"] = f"‚ùå –û—à–∏–±–∫–∞: {e}"

    # –¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ—Å—Ç—å –∫–∞–±–µ–ª–µ–π
    if test_cable_matching():
        results["–¢–æ—á–Ω–æ—Å—Ç—å –∫–∞–±–µ–ª–µ–π"] = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω"
    else:
        results["–¢–æ—á–Ω–æ—Å—Ç—å –∫–∞–±–µ–ª–µ–π"] = "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω"

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)

    for test_name, status in results.items():
        print(f"{test_name}: {status}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    passed = sum(1 for s in results.values() if "‚úÖ" in s)
    total = len(results)

    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")

    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ {passed} –∏–∑ {total} —Ç–µ—Å—Ç–æ–≤")


if __name__ == "__main__":
    main()