#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–±–µ–ª—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70–º–∫(PE)-1 —Å –∫–æ–¥–æ–º 9994067
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp
from src.models.material import Material
from elasticsearch import Elasticsearch


def test_real_cable_from_catalog():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–±–µ–ª—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    print("\n=== –¢–ï–°–¢: –ü–æ–∏—Å–∫ –∫–∞–±–µ–ª—è –ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ ===")

    config = {
        "elasticsearch": {
            "host": "localhost",
            "port": 9200,
            "bulk_size": 1000,
            "max_workers": 4
        },
        "matching": {
            "similarity_threshold": 20.0,
            "max_results_per_material": 10
        }
    }

    app = MaterialMatcherApp(config)

    if not app.es_service.check_connection():
        print("‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ
    es = Elasticsearch(['http://localhost:9200'])
    stats = es.indices.stats(index='price_list')
    doc_count = stats['indices']['price_list']['primaries']['docs']['count']
    print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {doc_count}")

    if doc_count < 100:
        print("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å –ø–æ—á—Ç–∏ –ø—É—Å—Ç–æ–π. –ó–∞–≥—Ä—É–∑–∏—Ç–µ catalog.json –∫–æ–º–∞–Ω–¥–æ–π:")
        print("venv/bin/python main.py --setup --price-list catalog.json")
        return False

    # –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª - –∫–∞–±–µ–ª—å 1—Ö70
    material = Material(
        id="test1",
        name="–ö–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70",
        equipment_code="–ü–ü–ì–Ω–≥(–ê)-FRHF 1—Ö70",
        manufacturer="–ö–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥"
    )

    print(f"\nüì¶ –ò—â–µ–º: {material.name}")
    print(f"   –ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {material.equipment_code}")

    # –ü–æ–∏—Å–∫ –≤ Elasticsearch
    results = app.search_material_by_name(material.name, top_n=10)

    if results:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")

        found_correct = False
        for i, result in enumerate(results[:5], 1):
            price_item = result.get('price_item', {})
            similarity = result.get('similarity_percentage', 0)
            article = price_item.get('article', 'N/A')

            print(f"\n   {i}. {price_item.get('name', 'N/A')}")
            print(f"      –ê—Ä—Ç–∏–∫—É–ª: {article}")
            print(f"      –ë—Ä–µ–Ω–¥: {price_item.get('brand', 'N/A')}")
            print(f"      –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1f}%")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            if '1—Ö70' in price_item.get('name', '') or '1x70' in price_item.get('name', ''):
                if '1—Ö95' not in price_item.get('name', '') and '1x95' not in price_item.get('name', ''):
                    print("      ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–±–µ–ª—è –Ω–∞–π–¥–µ–Ω!")
                    found_correct = True

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
                    if article == '9994067':
                        print("      üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω –∫–∞–±–µ–ª—å —Å –∫–æ–¥–æ–º 9994067!")
            elif '1—Ö95' in price_item.get('name', '') or '1x95' in price_item.get('name', ''):
                print("      ‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (1—Ö95 –≤–º–µ—Å—Ç–æ 1—Ö70)")

        if found_correct:
            print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ö–∞–±–µ–ª—å 1—Ö70 –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ö–∞–±–µ–ª—å 1—Ö70 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
            return False
    else:
        print("\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False


def search_specific_cable_by_code():
    """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–∞–±–µ–ª—è –ø–æ –∫–æ–¥—É 9994067"""
    print("\n=== –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö: –ö–∞–±–µ–ª—å —Å –∫–æ–¥–æ–º 9994067 ===")

    es = Elasticsearch(['http://localhost:9200'])

    # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    query = {
        'query': {
            'match': {
                'article': '9994067'
            }
        },
        'size': 5
    }

    try:
        results = es.search(index='price_list', body=query)
        hits = results.get('hits', {}).get('hits', [])

        if hits:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(hits)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º 9994067:")
            for hit in hits:
                item = hit['_source']
                print(f"\n   –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', 'N/A')}")
                print(f"   –ê—Ä—Ç–∏–∫—É–ª: {item.get('article', 'N/A')}")
                print(f"   –ë—Ä–µ–Ω–¥: {item.get('brand', 'N/A')}")
            return True
        else:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º 9994067 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ catalog.json
            if Path('catalog.json').exists():
                print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ catalog.json...")
                with open('catalog.json', 'r', encoding='utf-8') as f:
                    catalog = json.load(f)

                found = [item for item in catalog if str(item.get('article', '')) == '9994067']
                if found:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ catalog.json:")
                    for item in found:
                        print(f"   {item.get('name', 'N/A')}")
                    print("\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –µ—Å—Ç—å –≤ catalog.json, –Ω–æ –Ω–µ –≤ –∏–Ω–¥–µ–∫—Å–µ. –ù—É–∂–Ω–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è.")
                else:
                    print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –≤ catalog.json")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –ö–ê–ë–ï–õ–Ø")
    print("=" * 70)

    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
    print("\n–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–±–µ–ª—è –≤ –∏–Ω–¥–µ–∫—Å–µ")
    has_cable = search_specific_cable_by_code()

    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print("\n–®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
    test_passed = test_real_cable_from_catalog()

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    if has_cable and test_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    elif has_cable:
        print("‚ö†Ô∏è –ö–∞–±–µ–ª—å –µ—Å—Ç—å –≤ –∏–Ω–¥–µ–∫—Å–µ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif test_passed:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–±–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã")


if __name__ == "__main__":
    main()