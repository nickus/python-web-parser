#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
–ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
"""

import subprocess
import json
import sys
from pathlib import Path


def run_search(query, top_n=5):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    result = subprocess.run(
        ['venv/bin/python', 'main.py', '--search-material', query, '--top-n', str(top_n)],
        capture_output=True, text=True, encoding='utf-8'
    )
    return result.stdout


def check_result(stdout, expected_id, expected_name_part, expected_brand=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
    found_id = f"ID: {expected_id}" in stdout
    found_name = expected_name_part.upper() in stdout.upper()
    found_brand = True if expected_brand is None else expected_brand.upper() in stdout.upper()

    return found_id and found_name and found_brand


def test_exact_positions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""

    test_cases = [
        {
            "query": "–ü—Ä–∏–±–æ—Ä –ø—Ä–∏–µ–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π. RS-485 –†—É–±–µ–∂-2–û–ü –ø—Ä–æ—Ç.R3",
            "expected_id": "3109396",
            "expected_name": "–ü—Ä–∏–±–æ—Ä –ø—Ä–∏–µ–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π. RS-485",
            "expected_brand": "Rubezh",
            "description": "–†—É–±–µ–∂-2–û–ü –ø—Ä–æ—Ç.R3"
        },
        {
            "query": "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 24/2.5 RS-R3 2—Ö17 –ë–†",
            "expected_id": "5028231",
            "expected_name": "–ò–í–≠–ü–† 24/2,5 RS-R3",
            "expected_brand": "Rubezh",
            "description": "24/2,5 RS-R3 2—Ö17 –ë–†"
        },
        {
            "query": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä DTM 12–í 17–ê—á",
            "expected_id": "8057037",
            "expected_name": "DTM 1217",
            "expected_brand": "DELTA",
            "description": "DTM 1217"
        },
        {
            "query": "–ü—É–ª—å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏—è R3-–†—É–±–µ–∂-–ü–î–£-–ü–¢",
            "expected_id": "4620055",
            "expected_name": "–†—É–±–µ–∂-–ü–î–£-–ü–¢",
            "expected_brand": "Rubezh",
            "description": "R3-–†—É–±–µ–∂-–ü–î–£-–ü–¢"
        },
        {
            "query": "–ë–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†—É–±–µ–∂-–ë–ò–£ R3",
            "expected_id": "4620055",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—Ç –∂–µ ID —á—Ç–æ –∏ –ü–î–£
            "expected_name": "–†—É–±–µ–∂-–ë–ò–£",
            "expected_brand": "Rubezh",
            "description": "–†—É–±–µ–∂-–ë–ò–£ R3"
        },
        {
            "query": "FireSec-Pro R3",
            "expected_id": "3104572",
            "expected_name": "FireSec-Pro R3",
            "expected_brand": "Rubezh",
            "description": "FireSec-Pro R3"
        },
        {
            "query": "–ú–æ–¥—É–ª—å —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è R3-Link R3-–ú–°-–ï",
            "expected_id": "6229094",
            "expected_name": "R3-–ú–°-–ï",
            "expected_brand": "Rubezh",
            "description": "R3-–ú–°-–ï"
        },
        {
            "query": "–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π –º–æ—â–Ω–æ—Å—Ç—å 18 –∫–í—Ç –®–£–ù/–í-18-03-R3",
            "expected_id": "3287967",
            "expected_name": "–®–£–ù/–í-18-03-R3",
            "expected_brand": "Rubezh",
            "description": "–®–£–ù/–í-18-03-R3"
        },
        {
            "query": "–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π –º–æ—â–Ω–æ—Å—Ç—å 11 –∫–í—Ç –®–£–ù/–í-11-03-R3",
            "expected_id": "1617295",
            "expected_name": "–®–£–ù/–í-11-03-R3",
            "expected_brand": "Rubezh",
            "description": "–®–£–ù/–í-11-03-R3"
        },
        {
            "query": "–®–∫–∞—Ñ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω—ã–π –∞–¥—Ä–µ—Å–Ω—ã–π –º–æ—â–Ω–æ—Å—Ç—å 7.5 –∫–í—Ç –®–£–ù/–í-7,5-03-R3",
            "expected_id": "253569",
            "expected_name": "–®–£–ù/–í-7,5-03-R3",
            "expected_brand": "Rubezh",
            "description": "–®–£–ù/–í-7,5-03-R3"
        }
    ]

    print("="*70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ß–ù–û–ì–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô")
    print("="*70)

    passed = 0
    failed = 0

    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç: {test_case['description']}")
        print(f"   –ü–æ–∏—Å–∫: '{test_case['query'][:60]}...'")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è ID: {test_case['expected_id']}")

        stdout = run_search(test_case['query'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if check_result(stdout, test_case['expected_id'], test_case['expected_name'], test_case['expected_brand']):
            print(f"   ‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å ID {test_case['expected_id']}")
            passed += 1
        else:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–∞—à–ª–∏/–Ω–µ –Ω–∞—à–ª–∏
            if f"ID: {test_case['expected_id']}" in stdout:
                print(f"   ‚úÖ ID –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"   ‚ùå ID {test_case['expected_id']} –ù–ï –Ω–∞–π–¥–µ–Ω")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ ID –Ω–∞—à–ª–∏—Å—å
                lines = stdout.split('\n')
                found_ids = [line.strip() for line in lines if line.strip().startswith("ID:")][:3]
                if found_ids:
                    print(f"      –ù–∞–π–¥–µ–Ω—ã ID: {', '.join(found_ids)}")

            if test_case['expected_name'].upper() in stdout.upper():
                print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{test_case['expected_name']}'")
            else:
                print(f"   ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç '{test_case['expected_name']}'")

            if test_case['expected_brand'] and test_case['expected_brand'].upper() in stdout.upper():
                print(f"   ‚úÖ –ë—Ä–µ–Ω–¥ {test_case['expected_brand']} –Ω–∞–π–¥–µ–Ω")
            elif test_case['expected_brand']:
                print(f"   ‚ùå –ë—Ä–µ–Ω–¥ {test_case['expected_brand']} –ù–ï –Ω–∞–π–¥–µ–Ω")

            failed += 1

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{len(test_cases)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{len(test_cases)}")

    if passed == len(test_cases):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    elif passed > len(test_cases) * 0.7:
        print(f"\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed}/{len(test_cases)})")
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã ({passed}/{len(test_cases)} –ø—Ä–æ–π–¥–µ–Ω–æ)")


def test_simplified_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º"""
    print("\n" + "="*70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú")
    print("="*70)

    articles = [
        ("–†—É–±–µ–∂-2–û–ü –ø—Ä–æ—Ç.R3", "3109396"),
        ("24/2,5 RS-R3", "5028231"),
        ("DTM 1217", "8057037"),
        ("R3-–†—É–±–µ–∂-–ü–î–£-–ü–¢", "4620055"),
        ("FireSec-Pro R3", "3104572"),
        ("R3-–ú–°-–ï", "6229094"),
        ("–®–£–ù/–í-18-03-R3", "3287967"),
        ("–®–£–ù/–í-11-03-R3", "1617295"),
        ("–®–£–ù/–í-7,5-03-R3", "253569")
    ]

    for article, expected_id in articles:
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: '{article}'")
        stdout = run_search(article, top_n=3)

        if f"ID: {expected_id}" in stdout:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID: {expected_id}")
        else:
            print(f"   ‚ùå ID {expected_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID
            lines = stdout.split('\n')
            for line in lines:
                if line.strip().startswith("ID:"):
                    print(f"      –ù–∞–π–¥–µ–Ω: {line.strip()}")
                    break


def verify_catalog_presence():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ catalog.json"""
    print("\n" + "="*70)
    print("–ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –í CATALOG.JSON")
    print("="*70)

    if not Path('catalog.json').exists():
        print("‚ùå –§–∞–π–ª catalog.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open('catalog.json', 'r', encoding='utf-8') as f:
        catalog = json.load(f)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    catalog_dict = {str(item.get('id')): item for item in catalog}

    required_ids = [
        "3109396",  # –†—É–±–µ–∂-2–û–ü –ø—Ä–æ—Ç.R3
        "5028231",  # 24/2,5 RS-R3 2—Ö17 –ë–†
        "8057037",  # DTM 1217
        "4620055",  # R3-–†—É–±–µ–∂-–ü–î–£-–ü–¢
        "3104572",  # FireSec-Pro R3
        "6229094",  # R3-–ú–°-–ï
        "3287967",  # –®–£–ù/–í-18-03-R3
        "1617295",  # –®–£–ù/–í-11-03-R3
        "253569"    # –®–£–ù/–í-7,5-03-R3
    ]

    found = 0
    not_found = []

    for item_id in required_ids:
        if item_id in catalog_dict:
            item = catalog_dict[item_id]
            print(f"‚úÖ ID {item_id}: {item.get('name', 'N/A')[:60]}")
            found += 1
        else:
            print(f"‚ùå ID {item_id}: –ù–ï –ù–ê–ô–î–ï–ù –≤ catalog.json")
            not_found.append(item_id)

    print(f"\n–ù–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {found}/{len(required_ids)}")

    if not_found:
        print("\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ID –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ catalog.json –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ ID")
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found)}")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    verify_catalog_presence()

    # –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    test_exact_positions()

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    test_simplified_search()

    print("\n" + "="*70)
    print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –≤ catalog.json")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: venv/bin/python main.py --setup --price-list catalog.json")
    print("3. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main()