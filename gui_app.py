#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import json
from pathlib import Path
from datetime import datetime
import webbrowser

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp
from src.utils.json_formatter import MatchingResultFormatter


class MaterialMatcherGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - Material Matcher")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.app = None
        self.config = self.load_config()
        self.materials = []
        self.materials_order = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.price_items = []
        self.results = {}
        self.selected_variants = {}  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id: selected_match}
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.last_click_time = 0
        self.last_click_item = None
        self.double_click_delay = 500  # –º—Å–µ–∫
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.check_elasticsearch_status()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "elasticsearch": {
                "host": "localhost",
                "port": 9200,
                "username": None,
                "password": None
            },
            "matching": {
                "similarity_threshold": 20.0,
                "max_results_per_material": 10,
                "max_workers": 4
            }
        }
        
        config_path = "config.json"
        if Path(config_path).exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                    elif isinstance(value, dict):
                        for subkey, subvalue in value.items():
                            if subkey not in config[key]:
                                config[key][subkey] = subvalue
                return config
            except:
                pass
        
        return default_config
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é —Ñ–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", command=self.new_project)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", command=self.export_results)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings)
        tools_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Elasticsearch", command=self.check_elasticsearch)
        tools_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã", command=self.setup_indices)
        
        # –ú–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self.show_help)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"
        self.create_quickstart_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        self.create_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
        self.create_matching_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        self.create_results_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∏—Å–∫"
        self.create_search_tab()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.create_status_bar()
    
    def create_quickstart_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ttk.Label(tab, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!", 
                         font=('Arial', 16, 'bold'))
        title.pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å Elasticsearch
        status_frame = ttk.LabelFrame(tab, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", padding=10)
        status_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.es_status_label = ttk.Label(status_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...", 
                                        font=('Arial', 10))
        self.es_status_label.pack()
        
        ttk.Button(status_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.check_elasticsearch).pack(pady=5)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_frame = ttk.LabelFrame(tab, text="–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, padx=20, pady=10)
        
        actions_grid = ttk.Frame(actions_frame)
        actions_grid.pack()
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        row1 = ttk.Frame(actions_grid)
        row1.pack(fill=tk.X, pady=5)
        
        ttk.Button(row1, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", 
                  command=self.load_materials_file, width=20).pack(side=tk.LEFT, padx=5)
        ttk.Button(row1, text="üí∞ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç", 
                  command=self.load_pricelist_file, width=20).pack(side=tk.LEFT, padx=5)
        ttk.Button(row1, text="üîß –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã", 
                  command=self.setup_indices, width=20).pack(side=tk.LEFT, padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        row2 = ttk.Frame(actions_grid)
        row2.pack(fill=tk.X, pady=5)
        
        ttk.Button(row2, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", 
                  command=self.run_full_matching, width=20).pack(side=tk.LEFT, padx=5)
        ttk.Button(row2, text="üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", 
                  command=lambda: self.notebook.select(4), width=20).pack(side=tk.LEFT, padx=5)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∫–ª–∞–¥–∫–µ –ø–æ–∏—Å–∫–∞
        ttk.Button(row2, text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                  command=lambda: self.notebook.select(3), width=20).pack(side=tk.LEFT, padx=5)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ttk.LabelFrame(tab, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        info_text = """
üéØ –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É:
   ‚Ä¢ –í–∞—à–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ (–∫–∞—Ç–∞–ª–æ–≥, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
   ‚Ä¢ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

üìà –ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≤–µ—Å 40%)
   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–≤–µ—Å 20%)
   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–≤–µ—Å 15%)
   ‚Ä¢ –ë—Ä–µ–Ω–¥ (–≤–µ—Å 15%)
   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–≤–µ—Å 10%)

üîß –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è Elasticsearch (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker):
   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:8.15.1

üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤: CSV, Excel (.xlsx), JSON
üìã –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: JSON, CSV, Excel (.xlsx)
        """
        
        info_label = ttk.Label(info_frame, text=info_text.strip(), justify=tk.LEFT, 
                              font=('Arial', 9))
        info_label.pack(anchor=tk.W)
    
    def create_data_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials_frame = ttk.LabelFrame(tab, text="–§–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", padding=10)
        materials_frame.pack(fill=tk.X, padx=10, pady=5)
        
        materials_row = ttk.Frame(materials_frame)
        materials_row.pack(fill=tk.X)
        
        self.materials_path_var = tk.StringVar()
        ttk.Entry(materials_row, textvariable=self.materials_path_var, width=60).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(materials_row, text="–û–±–∑–æ—Ä...", command=self.load_materials_file).pack(side=tk.LEFT, padx=5)
        ttk.Button(materials_row, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_materials_data).pack(side=tk.LEFT, padx=5)
        
        self.materials_info_label = ttk.Label(materials_frame, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
                                             foreground="red")
        self.materials_info_label.pack(anchor=tk.W, pady=(5,0))
        
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
        pricelist_frame = ttk.LabelFrame(tab, text="–§–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞", padding=10)
        pricelist_frame.pack(fill=tk.X, padx=10, pady=5)
        
        pricelist_row = ttk.Frame(pricelist_frame)
        pricelist_row.pack(fill=tk.X)
        
        self.pricelist_path_var = tk.StringVar()
        ttk.Entry(pricelist_row, textvariable=self.pricelist_path_var, width=60).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(pricelist_row, text="–û–±–∑–æ—Ä...", command=self.load_pricelist_file).pack(side=tk.LEFT, padx=5)
        ttk.Button(pricelist_row, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_pricelist_data).pack(side=tk.LEFT, padx=5)
        
        self.pricelist_info_label = ttk.Label(pricelist_frame, text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", 
                                             foreground="red")
        self.pricelist_info_label.pack(anchor=tk.W, pady=(5,0))
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_frame = ttk.LabelFrame(tab, text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", padding=10)
        preview_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_notebook = ttk.Notebook(preview_frame)
        preview_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials_preview_frame = ttk.Frame(preview_notebook)
        preview_notebook.add(materials_preview_frame, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        self.materials_tree = ttk.Treeview(materials_preview_frame, height=8)
        materials_scrollbar = ttk.Scrollbar(materials_preview_frame, orient=tk.VERTICAL, 
                                           command=self.materials_tree.yview)
        self.materials_tree.configure(yscrollcommand=materials_scrollbar.set)
        
        self.materials_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        materials_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
        pricelist_preview_frame = ttk.Frame(preview_notebook)
        preview_notebook.add(pricelist_preview_frame, text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
        
        self.pricelist_tree = ttk.Treeview(pricelist_preview_frame, height=8)
        pricelist_scrollbar = ttk.Scrollbar(pricelist_preview_frame, orient=tk.VERTICAL, 
                                           command=self.pricelist_tree.yview)
        self.pricelist_tree.configure(yscrollcommand=pricelist_scrollbar.set)
        
        self.pricelist_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        pricelist_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.Frame(tab)
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(actions_frame, text="–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.index_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(actions_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.clear_data).pack(side=tk.LEFT, padx=5)
    
    def create_matching_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="‚öôÔ∏è –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        params_frame = ttk.LabelFrame(tab, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", padding=10)
        params_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
        threshold_row = ttk.Frame(params_frame)
        threshold_row.pack(fill=tk.X, pady=2)
        
        ttk.Label(threshold_row, text="–ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏:").pack(side=tk.LEFT)
        self.threshold_var = tk.DoubleVar(value=self.config['matching']['similarity_threshold'])
        threshold_scale = ttk.Scale(threshold_row, from_=0, to=100, 
                                   variable=self.threshold_var, orient=tk.HORIZONTAL)
        threshold_scale.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=10)
        self.threshold_label = ttk.Label(threshold_row, text=f"{self.threshold_var.get():.1f}%")
        self.threshold_label.pack(side=tk.LEFT)
        
        threshold_scale.configure(command=self.update_threshold_label)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        max_results_row = ttk.Frame(params_frame)
        max_results_row.pack(fill=tk.X, pady=2)
        
        ttk.Label(max_results_row, text="–ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª:").pack(side=tk.LEFT)
        self.max_results_var = tk.IntVar(value=self.config['matching']['max_results_per_material'])
        max_results_spin = ttk.Spinbox(max_results_row, from_=1, to=50, width=10,
                                      textvariable=self.max_results_var)
        max_results_spin.pack(side=tk.LEFT, padx=10)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        workers_row = ttk.Frame(params_frame)
        workers_row.pack(fill=tk.X, pady=2)
        
        ttk.Label(workers_row, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤:").pack(side=tk.LEFT)
        self.workers_var = tk.IntVar(value=self.config['matching']['max_workers'])
        workers_spin = ttk.Spinbox(workers_row, from_=1, to=16, width=10,
                                  textvariable=self.workers_var)
        workers_spin.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(tab)
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.start_button = ttk.Button(control_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", 
                                      command=self.run_full_matching, state="disabled")
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.stop_matching, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(tab, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        ttk.Label(progress_frame, textvariable=self.progress_var).pack(anchor=tk.W)
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='indeterminate')
        self.progress_bar.pack(fill=tk.X, pady=5)
        
        # –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        log_frame = ttk.LabelFrame(tab, text="–ñ—É—Ä–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
    
    def create_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(tab, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=10)
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        stats_grid = ttk.Frame(stats_frame)
        stats_grid.pack()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_labels = {}
        stats_items = [
            ("total_materials", "–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"),
            ("materials_with_matches", "–° –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏:"),
            ("total_matches", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:"),
            ("avg_similarity", "–°—Ä–µ–¥–Ω—è—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å:")
        ]
        
        for i, (key, text) in enumerate(stats_items):
            row = i // 2
            col = i % 2
            
            frame = ttk.Frame(stats_grid)
            frame.grid(row=row, column=col, padx=10, pady=2, sticky="w")
            
            ttk.Label(frame, text=text).pack(side=tk.LEFT)
            self.stats_labels[key] = ttk.Label(frame, text="0", font=('Arial', 10, 'bold'))
            self.stats_labels[key].pack(side=tk.LEFT, padx=(5,0))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(tab, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞
        columns = ("variant_name", "relevance", "price", "supplier", "brand", "category")
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show="tree headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.results_tree.heading("#0", text="–ú–∞—Ç–µ—Ä–∏–∞–ª")
        self.results_tree.heading("variant_name", text="–í–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
        self.results_tree.heading("relevance", text="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å")
        self.results_tree.heading("price", text="–¶–µ–Ω–∞")
        self.results_tree.heading("supplier", text="–ü–æ—Å—Ç–∞–≤—â–∏–∫")
        self.results_tree.heading("brand", text="–ë—Ä–µ–Ω–¥")
        self.results_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.results_tree.column("#0", width=200, minwidth=150)
        self.results_tree.column("variant_name", width=250, minwidth=200)
        self.results_tree.column("relevance", width=100, minwidth=80)
        self.results_tree.column("price", width=100, minwidth=80)
        self.results_tree.column("supplier", width=150, minwidth=100)
        self.results_tree.column("brand", width=100, minwidth=80)
        self.results_tree.column("category", width=120, minwidth=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_v_scroll = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_tree.yview)
        results_h_scroll = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=results_v_scroll.set, xscrollcommand=results_h_scroll.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_tree.grid(row=0, column=0, sticky="nsew")
        results_v_scroll.grid(row=0, column=1, sticky="ns")
        results_h_scroll.grid(row=1, column=0, sticky="ew")
        
        results_frame.grid_rowconfigure(0, weight=1)
        results_frame.grid_columnconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ/–¥–≤–æ–π–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        self.results_tree.bind("<Button-1>", self.on_smart_click)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.log_message("üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–µ—Ä–µ–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = ttk.Frame(tab)
        export_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(export_frame, text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (JSON)", 
                  command=lambda: self.export_results("json")).pack(side=tk.LEFT, padx=5)
        ttk.Button(export_frame, text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (CSV)", 
                  command=lambda: self.export_results("csv")).pack(side=tk.LEFT, padx=5)
        ttk.Button(export_frame, text="üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Excel)", 
                  command=lambda: self.export_results("xlsx")).pack(side=tk.LEFT, padx=5)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(export_frame, orient='vertical').pack(side=tk.LEFT, fill='y', padx=10)
        
        ttk.Button(export_frame, text="‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (Excel)", 
                  command=lambda: self.export_selected_results("xlsx")).pack(side=tk.LEFT, padx=5)
        ttk.Button(export_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä—ã", 
                  command=self.reset_selections).pack(side=tk.LEFT, padx=5)
        ttk.Button(export_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_results).pack(side=tk.RIGHT, padx=5)
    
    def create_search_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üîç –ü–æ–∏—Å–∫")
        
        # –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        search_frame = ttk.LabelFrame(tab, text="–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", padding=10)
        search_frame.pack(fill=tk.X, padx=10, pady=5)
        
        search_row = ttk.Frame(search_frame)
        search_row.pack(fill=tk.X)
        
        ttk.Label(search_row, text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:").pack(side=tk.LEFT)
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_row, textvariable=self.search_var, width=40)
        search_entry.pack(side=tk.LEFT, padx=10, fill=tk.X, expand=True)
        search_entry.bind('<Return>', lambda e: self.search_material())
        
        ttk.Button(search_row, text="üîç –ù–∞–π—Ç–∏", command=self.search_material).pack(side=tk.LEFT, padx=5)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_row = ttk.Frame(search_frame)
        results_row.pack(fill=tk.X, pady=(5,0))
        
        ttk.Label(results_row, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:").pack(side=tk.LEFT)
        self.search_limit_var = tk.IntVar(value=10)
        ttk.Spinbox(results_row, from_=1, to=50, width=10, 
                   textvariable=self.search_limit_var).pack(side=tk.LEFT, padx=10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        search_results_frame = ttk.LabelFrame(tab, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", padding=10)
        search_results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        search_columns = ("match_name", "similarity", "price", "supplier", "category")
        self.search_tree = ttk.Treeview(search_results_frame, columns=search_columns, 
                                       show="tree headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
        self.search_tree.heading("#0", text="‚Ññ")
        self.search_tree.heading("match_name", text="–ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")
        self.search_tree.heading("similarity", text="–ü–æ—Ö–æ–∂–µ—Å—Ç—å, %")
        self.search_tree.heading("price", text="–¶–µ–Ω–∞")
        self.search_tree.heading("supplier", text="–ü–æ—Å—Ç–∞–≤—â–∏–∫")
        self.search_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–∏—Å–∫–∞
        self.search_tree.column("#0", width=50, minwidth=30)
        self.search_tree.column("match_name", width=250, minwidth=200)
        self.search_tree.column("similarity", width=100, minwidth=80)
        self.search_tree.column("price", width=100, minwidth=80)
        self.search_tree.column("supplier", width=150, minwidth=100)
        self.search_tree.column("category", width=120, minwidth=80)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_v_scroll = ttk.Scrollbar(search_results_frame, orient=tk.VERTICAL, 
                                       command=self.search_tree.yview)
        search_h_scroll = ttk.Scrollbar(search_results_frame, orient=tk.HORIZONTAL, 
                                       command=self.search_tree.xview)
        self.search_tree.configure(yscrollcommand=search_v_scroll.set, 
                                  xscrollcommand=search_h_scroll.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        self.search_tree.grid(row=0, column=0, sticky="nsew")
        search_v_scroll.grid(row=0, column=1, sticky="ns")
        search_h_scroll.grid(row=1, column=0, sticky="ew")
        
        search_results_frame.grid_rowconfigure(0, weight=1)
        search_results_frame.grid_columnconfigure(0, weight=1)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤")
        self.status_label = ttk.Label(self.status_frame, textvariable=self.status_var)
        self.status_label.pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Elasticsearch
        self.es_indicator = ttk.Label(self.status_frame, text="‚óè", foreground="red")
        self.es_indicator.pack(side=tk.RIGHT, padx=5)
        
        self.es_status_text = ttk.Label(self.status_frame, text="Elasticsearch: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.es_status_text.pack(side=tk.RIGHT, padx=5)
    
    def update_threshold_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ—Ä–æ–≥–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏"""
        self.threshold_label.config(text=f"{float(value):.1f}%")
    
    def check_elasticsearch_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Elasticsearch"""
        def check():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                if self.app.es_service.check_connection():
                    self.root.after(0, lambda: self.update_es_status(True))
                else:
                    self.root.after(0, lambda: self.update_es_status(False))
            except Exception as e:
                self.root.after(0, lambda: self.update_es_status(False, str(e)))
        
        threading.Thread(target=check, daemon=True).start()
    
    def update_es_status(self, connected, error=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Elasticsearch"""
        if connected:
            self.es_indicator.config(foreground="green")
            self.es_status_text.config(text="Elasticsearch: –ü–æ–¥–∫–ª—é—á–µ–Ω")
            self.es_status_label.config(text="‚úÖ Elasticsearch –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!", foreground="green")
            self.start_button.config(state="normal" if self.materials and self.price_items else "disabled")
        else:
            self.es_indicator.config(foreground="red")
            self.es_status_text.config(text="Elasticsearch: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            error_msg = f"‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            if error:
                error_msg += f": {error}"
            self.es_status_label.config(text=error_msg, foreground="red")
            self.start_button.config(state="disabled")
    
    def check_elasticsearch(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""
        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...")
        self.check_elasticsearch_status()
    
    def setup_indices(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ Elasticsearch"""
        def create_indices():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤..."))
                
                if self.app.setup_indices():
                    self.root.after(0, lambda: self.log_message("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                else:
                    self.root.after(0, lambda: self.log_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤!"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=create_indices, daemon=True).start()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏...
    
    def load_materials_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            filetypes=[
                ("–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ", "*.csv;*.xlsx;*.json"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filename:
            self.materials_path_var.set(filename)
    
    def load_pricelist_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞",
            filetypes=[
                ("–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ", "*.csv;*.xlsx;*.json"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filename:
            self.pricelist_path_var.set(filename)
    
    def load_materials_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        if not self.materials_path_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            return
        
        def load():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
                
                materials = self.app.load_materials(self.materials_path_var.get())
                if materials:
                    self.materials = materials
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    self.materials_order = [material.id for material in materials]
                    self.root.after(0, lambda: self.update_materials_info(len(materials)))
                    self.root.after(0, lambda: self.update_materials_preview(materials))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=load, daemon=True).start()
    
    def load_pricelist_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        if not self.pricelist_path_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
            return
        
        def load():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞..."))
                
                price_items = self.app.load_price_list(self.pricelist_path_var.get())
                if price_items:
                    self.price_items = price_items
                    self.root.after(0, lambda: self.update_pricelist_info(len(price_items)))
                    self.root.after(0, lambda: self.update_pricelist_preview(price_items))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=load, daemon=True).start()
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã...
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
    
    def new_project(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        if messagebox.askyesno("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç?"):
            self.clear_data()
            self.results = {}
            self.refresh_results()
            self.log_message("üîÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

1. –ü–û–î–ì–û–¢–û–í–ö–ê:
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Elasticsearch –∑–∞–ø—É—â–µ–Ω
   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∞–π–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ (CSV, Excel, JSON)

2. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"

3. –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏, –∫–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"

4. –†–ï–ó–£–õ–¨–¢–ê–¢–´:
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ JSON, CSV –∏–ª–∏ Excel –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

5. –ü–û–ò–°–ö:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ü–æ–∏—Å–∫" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        """
        
        help_window = tk.Toplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞")
        help_window.geometry("600x500")
        
        text_widget = scrolledtext.ScrolledText(help_window, wrap=tk.WORD)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_widget.insert(tk.END, help_text.strip())
        text_widget.config(state=tk.DISABLED)
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
            "–°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ v1.0\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π\n"
            "–º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Elasticsearch –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n"
            "–¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "¬© 2025 Material Matcher")
    
    def update_materials_info(self, count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
        self.materials_info_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", foreground="green")
    
    def update_pricelist_info(self, count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ"""
        self.pricelist_info_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø–æ–∑–∏—Ü–∏–π", foreground="green")
    
    def update_materials_preview(self, materials):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.materials_tree.get_children():
            self.materials_tree.delete(item)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns = ("name", "category", "brand", "description")
        self.materials_tree["columns"] = columns
        self.materials_tree["show"] = "headings"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.materials_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.materials_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.materials_tree.heading("brand", text="–ë—Ä–µ–Ω–¥")
        self.materials_tree.heading("description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.materials_tree.column("name", width=200, minwidth=150)
        self.materials_tree.column("category", width=120, minwidth=80)
        self.materials_tree.column("brand", width=120, minwidth=80)
        self.materials_tree.column("description", width=300, minwidth=200)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 100 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        for material in materials[:100]:
            desc = material.description[:100] + "..." if len(material.description) > 100 else material.description
            self.materials_tree.insert("", tk.END, values=(
                material.name,
                material.category or "",
                material.brand or "",
                desc
            ))
        
        if len(materials) > 100:
            self.materials_tree.insert("", tk.END, values=(
                f"... –∏ –µ—â–µ {len(materials) - 100} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                "", "", ""
            ))
    
    def update_pricelist_preview(self, price_items):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.pricelist_tree.get_children():
            self.pricelist_tree.delete(item)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns = ("name", "price", "supplier", "category", "description")
        self.pricelist_tree["columns"] = columns
        self.pricelist_tree["show"] = "headings"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.pricelist_tree.heading("name", text="–ú–∞—Ç–µ—Ä–∏–∞–ª")
        self.pricelist_tree.heading("price", text="–¶–µ–Ω–∞")
        self.pricelist_tree.heading("supplier", text="–ü–æ—Å—Ç–∞–≤—â–∏–∫")
        self.pricelist_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.pricelist_tree.heading("description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.pricelist_tree.column("name", width=200, minwidth=150)
        self.pricelist_tree.column("price", width=100, minwidth=80)
        self.pricelist_tree.column("supplier", width=150, minwidth=100)
        self.pricelist_tree.column("category", width=120, minwidth=80)
        self.pricelist_tree.column("description", width=250, minwidth=200)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 100 –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        for item in price_items[:100]:
            desc = item.description[:100] + "..." if len(item.description) > 100 else item.description
            price_str = f"{item.price} {item.currency}" if item.price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            self.pricelist_tree.insert("", tk.END, values=(
                item.material_name,
                price_str,
                item.supplier or "",
                item.category or "",
                desc
            ))
        
        if len(price_items) > 100:
            self.pricelist_tree.insert("", tk.END, values=(
                f"... –∏ –µ—â–µ {len(price_items) - 100} –ø–æ–∑–∏—Ü–∏–π",
                "", "", "", ""
            ))
    
    def update_start_button_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        if self.materials and self.price_items and self.app:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def check():
                try:
                    connected = self.app.es_service.check_connection()
                    self.root.after(0, lambda: self._set_start_button_state(connected))
                except:
                    self.root.after(0, lambda: self._set_start_button_state(False))
            
            threading.Thread(target=check, daemon=True).start()
        else:
            self.start_button.config(state="disabled")
    
    def _set_start_button_state(self, es_connected):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        if self.materials and self.price_items and es_connected:
            self.start_button.config(state="normal")
        else:
            self.start_button.config(state="disabled")
    
    def index_data(self):
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not self.materials and not self.price_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return
        
        def index():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."))
                self.root.after(0, lambda: self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö..."))
                
                if self.app.index_data(self.materials, self.price_items):
                    self.root.after(0, lambda: self.log_message("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                else:
                    self.root.after(0, lambda: self.log_message("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö!"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=index, daemon=True).start()
    
    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.materials = []
        self.materials_order = []
        self.price_items = []
        self.results = {}
        self.selected_variants = {}
        
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.materials_path_var.set("")
        self.pricelist_path_var.set("")
        self.materials_info_label.config(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", foreground="red")
        self.pricelist_info_label.config(text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground="red")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        for item in self.materials_tree.get_children():
            self.materials_tree.delete(item)
        for item in self.pricelist_tree.get_children():
            self.pricelist_tree.delete(item)
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for key in self.stats_labels:
            self.stats_labels[key].config(text="0")
        
        self.start_button.config(state="disabled")
        self.log_message("üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    def run_full_matching(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if not self.materials or not self.price_items:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config['matching']['similarity_threshold'] = self.threshold_var.get()
        self.config['matching']['max_results_per_material'] = self.max_results_var.get()
        self.config['matching']['max_workers'] = self.workers_var.get()
        
        self.matching_cancelled = False
        
        def matching():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.root.after(0, lambda: self.start_button.config(state="disabled"))
                self.root.after(0, lambda: self.stop_button.config(state="normal"))
                self.root.after(0, lambda: self.progress_bar.start(10))
                self.root.after(0, lambda: self.progress_var.set("–ó–∞–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è..."))
                self.root.after(0, lambda: self.status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ..."))
                self.root.after(0, lambda: self.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                results = self.app.run_matching(self.materials)
                
                if not self.matching_cancelled:
                    self.results = results
                    self.root.after(0, lambda: self.update_results_display())
                    self.root.after(0, lambda: self.log_message("‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"))
                    self.root.after(0, lambda: self.notebook.select(3))  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                else:
                    self.root.after(0, lambda: self.log_message("‚èπ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"))
                
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}"))
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
                self.root.after(0, lambda: self.start_button.config(state="normal"))
                self.root.after(0, lambda: self.stop_button.config(state="disabled"))
                self.root.after(0, lambda: self.progress_bar.stop())
                self.root.after(0, lambda: self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"))
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
        
        threading.Thread(target=matching, daemon=True).start()
    
    def stop_matching(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        self.matching_cancelled = True
        self.stop_button.config(state="disabled")
        self.log_message("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
    
    def update_results_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.formatter = MatchingResultFormatter(max_matches=7)
        formatted_results = self.formatter.format_matching_results(self.results, self.materials_order)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.formatter.get_statistics()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_labels["total_materials"].config(text=str(stats["total_materials"]))
        self.stats_labels["materials_with_matches"].config(text=str(stats["materials_with_matches"]))
        self.stats_labels["total_matches"].config(text=str(stats["total_variants_found"]))
        self.stats_labels["avg_similarity"].config(text=f"{stats['average_relevance']*100:.1f}%")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        for result in formatted_results:
            material_name = result["material_name"]
            matches = result["matches"]
            
            if matches:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
                parent = self.results_tree.insert("", tk.END, 
                    text=material_name,
                    tags=("material",)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º)
                for i, match in enumerate(matches[:7], 1):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    variant_name = match["variant_name"]
                    relevance = f"{match['relevance']*100:.1f}%"
                    price = f"{match['price']:.2f} RUB" if match['price'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    supplier = match["supplier"] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                    brand = match["brand"] or "-"
                    category = match.get("category", "-")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    tag = "high" if match['relevance'] > 0.7 else "medium" if match['relevance'] > 0.4 else "low"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
                    child = self.results_tree.insert(parent, tk.END, 
                        values=(variant_name, relevance, price, supplier, brand, category),
                        tags=(tag, f"variant_{result['material_id']}_{match['variant_id']}")
                    )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                if formatted_results.index(result) < 5:
                    self.results_tree.item(parent, open=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏
        self.results_tree.tag_configure("material", font=('Arial', 10, 'bold'))
        self.results_tree.tag_configure("high", foreground="darkgreen")
        self.results_tree.tag_configure("medium", foreground="darkorange")
        self.results_tree.tag_configure("low", foreground="darkred")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –≤—ã—à–µ —á–µ—Ä–µ–∑ on_smart_click
    
    def on_variant_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        selection = self.results_tree.selection()
        if selection:
            item = self.results_tree.item(selection[0])
            tags = item.get('tags', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª
            for tag in tags:
                if tag.startswith('variant_'):
                    parts = tag.split('_')
                    if len(parts) >= 3:
                        material_id = parts[1]
                        variant_id = parts[2]
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        if hasattr(self, 'formatter'):
                            result = self.formatter.select_variant(material_id, variant_id)
                            if 'error' not in result:
                                self.log_message(f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {variant_id} –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id}")
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                                self.highlight_selected_variant(selection[0])
                            else:
                                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: {result['error']}")
    
    def highlight_selected_variant(self, item_id):
        """–í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        parent_id = self.results_tree.parent(item_id)
        for child in self.results_tree.get_children(parent_id):
            self.results_tree.item(child, tags=self.results_tree.item(child)['tags'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        current_tags = list(self.results_tree.item(item_id)['tags'])
        if 'selected' not in current_tags:
            current_tags.append('selected')
        self.results_tree.item(item_id, tags=current_tags)
        self.results_tree.tag_configure('selected', background='lightblue', font=('Arial', 10, 'bold'))
    
    def on_smart_click(self, event):
        """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∏ –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        import time
        
        try:
            item = self.results_tree.identify('item', event.x, event.y)
            current_time = int(time.time() * 1000)  # –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if not item:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
            if (item == self.last_click_item and 
                current_time - self.last_click_time < self.double_click_delay):
                
                # –≠—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫!
                self.log_message("üî• –î–í–û–ô–ù–û–ô –ö–õ–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù! (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
                self.handle_double_click(event, item)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                self.last_click_item = None
                self.last_click_time = 0
                
            else:
                # –≠—Ç–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
                self.last_click_item = item
                self.last_click_time = current_time
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                column = self.results_tree.identify('column', event.x, event.y)
                region = self.results_tree.identify('region', event.x, event.y)
                parent = self.results_tree.parent(item)
                item_text = self.results_tree.item(item, 'text')
                item_values = self.results_tree.item(item, 'values')
                item_tags = self.results_tree.item(item, 'tags')
                
                self.log_message(f"üñ±Ô∏è –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫: —ç–ª–µ–º–µ–Ω—Ç={item}, –∫–æ–ª–æ–Ω–∫–∞={column}, —Ä–µ–≥–∏–æ–Ω={region}")
                self.log_message(f"   –†–æ–¥–∏—Ç–µ–ª—å: {parent}, –¢–µ–∫—Å—Ç: '{item_text}', –¢–µ–≥–∏: {item_tags}")
                if item_values:
                    self.log_message(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {item_values}")
                    
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
    
    def handle_double_click(self, event, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏
            column = self.results_tree.identify('column', event.x, event.y)
            
            if not item:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É (–¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç), –∞ –Ω–µ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
            parent = self.results_tree.parent(item)
            if not parent:  # –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É, –∞ –Ω–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É
                self.log_message("‚ÑπÔ∏è –ö–ª–∏–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–Ω–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É)")
                return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.log_message(f"üîç –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: —ç–ª–µ–º–µ–Ω—Ç={item}, –∫–æ–ª–æ–Ω–∫–∞={column}, —Ä–æ–¥–∏—Ç–µ–ª—å={parent}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è material_id –∏ variant_id
        tags = self.results_tree.item(item, 'tags')
        self.log_message(f"üè∑Ô∏è –¢–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {tags}")
        
        variant_tag = None
        for tag in tags:
            if tag.startswith('variant_'):
                variant_tag = tag
                break
        
        if not variant_tag:
            self.log_message(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ {tags}")
            return
        
        self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–≥ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_tag}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º material_id –∏–∑ —Ç–µ–≥–∞ (—Ñ–æ—Ä–º–∞—Ç: variant_material_id_variant_id)
        try:
            parts = variant_tag.split('_')
            if len(parts) < 3:
                self.log_message(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: {variant_tag}")
                return
            
            material_id = parts[1]
            variant_id = parts[2]
            
            self.log_message(f"üìã Material ID: {material_id}, Variant ID: {variant_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            values = self.results_tree.item(item, 'values')
            if not values:
                self.log_message(f"‚ùå –ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item}")
                return
                
            self.log_message(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {values}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
        
        variant_name = values[0]  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        relevance = values[1]     # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        price = values[2]         # –¶–µ–Ω–∞
        supplier = values[3]      # –ü–æ—Å—Ç–∞–≤—â–∏–∫
        brand = values[4]         # –ë—Ä–µ–Ω–¥
        category = values[5]      # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        self.selected_variants[material_id] = {
            'variant_id': variant_id,
            'variant_name': variant_name,
            'relevance': relevance,
            'price': price,
            'supplier': supplier,
            'brand': brand,
            'category': category,
            'item_id': item
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ø–æ–¥–Ω–∏–º–∞–µ–º –µ–≥–æ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
        self.update_selected_variant_display(parent, item, variant_name)
        
        # –ó–∞—Ç–µ–º —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.hide_other_variants(parent, None)  # None —Ç–∞–∫ –∫–∞–∫ selected_item —É–∂–µ —É–¥–∞–ª–µ–Ω
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        material_name = self.results_tree.item(parent, 'text')
        self.log_message(f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è '{material_name}': {variant_name}")
    
    def hide_other_variants(self, parent_item, selected_item):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        children = list(self.results_tree.get_children(parent_item))
        for child in children:
            if child != selected_item:
                self.results_tree.delete(child)
        
        self.log_message(f"üóëÔ∏è –°–∫—Ä—ã—Ç–æ {len(children)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    
    def update_selected_variant_display(self, parent_item, selected_item, variant_name):
        """–ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        selected_values = self.results_tree.item(selected_item, 'values')
        material_name = self.results_tree.item(parent_item, 'text')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–º–∞—Ç–µ—Ä–∏–∞–ª) - –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        updated_text = f"{material_name} ‚û§ {variant_name}"
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.results_tree.item(parent_item, 
                              text=updated_text,
                              values=selected_values)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        
        # –£–¥–∞–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (–≤–∞—Ä–∏–∞–Ω—Ç), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.results_tree.delete(selected_item)
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        parent_tags = list(self.results_tree.item(parent_item, 'tags'))
        if 'material_with_selection' not in parent_tags:
            parent_tags.append('material_with_selection')
        self.results_tree.item(parent_item, tags=parent_tags)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        self.results_tree.tag_configure('material_with_selection', 
                                       background='lightgreen',
                                       font=('Arial', 11, 'bold'),
                                       foreground='darkgreen')
        
        self.log_message(f"üìç –í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' –ø–æ–¥–Ω—è—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    
    def refresh_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.results:
            self.update_results_display()
            self.log_message("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def reset_selections(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤"""
        if not self.selected_variants:
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞")
            return
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä—ã
        self.selected_variants.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.update_results_display()
        
        self.log_message("üîÑ –í—Å–µ –≤—ã–±–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def export_selected_results(self, format_type="xlsx"):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.selected_variants:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        selected_data = []
        for material_id, selected in self.selected_variants.items():
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            for material_id_key, search_results in self.results.items():
                if material_id_key == material_id:
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª
                    material = None
                    for m in self.materials:
                        if m.id == material_id:
                            material = m
                            break
                    
                    if material:
                        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                        for result in search_results:
                            if result.price_item.id == selected['variant_id']:
                                selected_data.append(result.to_dict())
                                break
                    break
        
        if not selected_data:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if filename:
            def export():
                try:
                    self.root.after(0, lambda: self.status_var.set("–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if self.app is None:
                        self.app = MaterialMatcherApp(self.config)
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    from src.utils.data_loader import DataExporter
                    DataExporter.export_results_to_xlsx(selected_data, filename)
                    
                    self.root.after(0, lambda: self.log_message(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                    
                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {e}"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"))
            
            threading.Thread(target=export, daemon=True).start()
    
    def export_results(self, format_type="json"):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if format_type == "json":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".json",
                filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        elif format_type == "csv":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".csv",
                filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        elif format_type == "xlsx":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".xlsx",
                filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        else:
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".json",
                filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        
        if filename:
            def export():
                try:
                    self.root.after(0, lambda: self.status_var.set(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {format_type.upper()}..."))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if hasattr(self, 'formatter'):
                        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON
                        success = self.formatter.export_to_json(
                            filename, 
                            include_unselected=True,
                            pretty=True
                        )
                        if success:
                            self.root.after(0, lambda: self.log_message(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                            self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                        if self.app is None:
                            self.app = MaterialMatcherApp(self.config)
                        self.app.export_results(self.results, filename, format_type)
                        self.root.after(0, lambda: self.log_message(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                        self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                        self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                        
                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"))
            
            threading.Thread(target=export, daemon=True).start()
    
    def search_material(self):
        """–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        query = self.search_var.get().strip()
        if not query:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        def search():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                matches = self.app.search_material_by_name(query, top_n=self.search_limit_var.get())
                
                self.root.after(0, lambda: self.update_search_results(query, matches))
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=search, daemon=True).start()
    
    def update_search_results(self, query, matches):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        for item in self.search_tree.get_children():
            self.search_tree.delete(item)
        
        if matches:
            self.log_message(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è '{query}'")
            
            for i, match in enumerate(matches, 1):
                price_str = f"{match['price_item']['price']} {match['price_item']['currency']}" if match['price_item']['price'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                
                self.search_tree.insert("", tk.END, text=str(i), values=(
                    match['price_item']['material_name'],
                    f"{match['similarity_percentage']:.1f}%",
                    price_str,
                    match['price_item']['supplier'] or "",
                    match['price_item']['category'] or ""
                ))
        else:
            self.log_message(f"‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.search_tree.insert("", tk.END, text="", values=(
                "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "", "", "", ""
            ))


def main():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = MaterialMatcherGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()