#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import json
from pathlib import Path
from datetime import datetime
import webbrowser

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp
from src.utils.json_formatter import MatchingResultFormatter
from src.utils.debug_logger import get_debug_logger, init_debug_logging
from src.ui.modern_table_view import ModernTableView
from src.services.etm_api_service import get_etm_service


class MaterialMatcherGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - Material Matcher")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–ª—è Treeview
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.style = style
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.app = None
        self.config = self.load_config()
        self.materials = []
        self.materials_order = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.price_items = []
        self.results = {}
        self.selected_variants = {}  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id: selected_match}
        self.selected_pricelist_files = []  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.view_mode = "tree"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.last_click_time = 0
        self.last_click_item = None
        self.double_click_delay = 500  # –º—Å–µ–∫
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        init_debug_logging(log_level="INFO")
        self.debug_logger = get_debug_logger()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.check_elasticsearch_status()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.root.after(1000, self.auto_load_on_startup)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "elasticsearch": {
                "host": "localhost",
                "port": 9200,
                "username": None,
                "password": None
            },
            "matching": {
                "similarity_threshold": 20.0,
                "max_results_per_material": 4,
                "max_workers": 4
            }
        }
        
        config_path = "config.json"
        if Path(config_path).exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                    elif isinstance(value, dict):
                        for subkey, subvalue in value.items():
                            if subkey not in config[key]:
                                config[key][subkey] = subvalue
                return config
            except:
                pass
        
        return default_config
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é —Ñ–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", command=self.new_project)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", command=self.export_results)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings)
        tools_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Elasticsearch", command=self.check_elasticsearch)
        tools_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã", command=self.setup_indices)
        tools_menu.add_separator()
        tools_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏", command=self.copy_debug_logs)
        tools_menu.add_command(label="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ª–æ–≥–æ–≤", command=self.show_debug_logs_window)
        
        # –ú–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self.show_help)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
        self.create_main_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        self.create_results_tab()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.create_status_bar()
    
    
    def create_main_tab(self):
        """–ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
        
        # === –°–ï–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials_frame = ttk.LabelFrame(tab, text="–§–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", padding=10)
        materials_frame.pack(fill=tk.X, padx=10, pady=2)
        
        materials_row = ttk.Frame(materials_frame)
        materials_row.pack(fill=tk.X)
        
        self.materials_path_var = tk.StringVar()
        ttk.Button(materials_row, text="üìÅ –í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                  command=self.load_materials_file, width=30).pack(side=tk.LEFT, padx=5)
        
        self.materials_info_label = ttk.Label(materials_row, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
                                             foreground="red")
        self.materials_info_label.pack(side=tk.LEFT, padx=(10,0))
        
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
        pricelist_frame = ttk.LabelFrame(tab, text="–§–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞", padding=10)
        pricelist_frame.pack(fill=tk.X, padx=10, pady=2)
        
        pricelist_row = ttk.Frame(pricelist_frame)
        pricelist_row.pack(fill=tk.X)
        
        self.pricelist_path_var = tk.StringVar()
        ttk.Button(pricelist_row, text="üìÑ –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
                  command=self.load_pricelist_file, width=35).pack(side=tk.LEFT, padx=5)
        
        self.pricelist_info_label = ttk.Label(pricelist_row, text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", 
                                             foreground="red")
        self.pricelist_info_label.pack(side=tk.LEFT, padx=(10,0))
        
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
        actions_frame = ttk.Frame(tab)
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(actions_frame, text="–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.index_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(actions_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.clear_data).pack(side=tk.LEFT, padx=5)
        
        # === –°–ï–ö–¶–ò–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø ===
        
        # –°–∫—Ä—ã—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        self.threshold_var = tk.DoubleVar(value=self.config['matching']['similarity_threshold'])
        self.max_results_var = tk.IntVar(value=self.config['matching']['max_results_per_material'])
        self.workers_var = tk.IntVar(value=self.config['matching']['max_workers'])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
        control_frame = ttk.Frame(tab)
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.start_button = ttk.Button(control_frame, text="[START] –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", 
                                      command=self.run_full_matching, state="disabled")
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="[STOP] –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.stop_matching, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(tab, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        ttk.Label(progress_frame, textvariable=self.progress_var).pack(anchor=tk.W)
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.pack(fill=tk.X, pady=5)
        
        # –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        log_frame = ttk.LabelFrame(tab, text="–ñ—É—Ä–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_buttons_frame = ttk.Frame(log_frame)
        log_buttons_frame.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Button(log_buttons_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ª–æ–≥", 
                  command=self.copy_log_to_clipboard).pack(side=tk.LEFT, padx=5)
        ttk.Button(log_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", 
                  command=self.clear_log).pack(side=tk.LEFT, padx=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
    
    def create_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(tab, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        view_controls_frame = ttk.Frame(results_frame)
        view_controls_frame.pack(fill=tk.X, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        auto_select_btn = ttk.Button(view_controls_frame, text="üéØ –ê–≤—Ç–æ–≤—ã–±–æ—Ä",
                                   command=self.auto_select_all_variants)
        auto_select_btn.pack(side=tk.LEFT, padx=(0, 10))

        expand_all_btn = ttk.Button(view_controls_frame, text="üìÇ –†–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ",
                                  command=self.expand_all_materials)
        expand_all_btn.pack(side=tk.LEFT, padx=(0, 10))

        update_prices_btn = ttk.Button(view_controls_frame, text="üí∞ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã ETM",
                                     command=self.update_etm_prices)
        update_prices_btn.pack(side=tk.LEFT)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_container = ttk.Frame(results_frame)
        self.results_container.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≥–æ–ª—É–±—ã–µ) –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ (—Ä–æ–∑–æ–≤—ã–µ)
        columns = ("material_code", "material_manufacturer",
                  "variant_name", "price_article", "price_brand", "relevance",
                  "etm_code", "price")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Excel-like —Å—Ç–∏–ª—å –¥–ª—è Treeview
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Excel.Treeview",
                       background="white",
                       fieldbackground="white",
                       bordercolor="black",
                       borderwidth=1,
                       relief="solid",
                       font=('Segoe UI', 9))
        style.configure("Excel.Treeview.Heading",
                       background="#E0E0E0",
                       bordercolor="black",
                       borderwidth=1,
                       relief="solid",
                       font=('Segoe UI', 9, 'bold'),
                       foreground="black")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        style.map("Excel.Treeview",
                 background=[('selected', '#4A90E2')],
                 foreground=[('selected', 'white')])

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        style.configure("Excel.Treeview.Item",
                       background="white",
                       foreground="black")
        style.configure("Excel.Treeview.Selected",
                       background="#E6FFE6",
                       foreground="darkgreen",
                       font=('Segoe UI', 9, 'bold'))
        style.configure("Excel.Treeview.MaterialWithSelection",
                       background="#E6F3FF",
                       foreground="darkblue",
                       font=('Segoe UI', 9, 'bold'))
        
        self.results_tree = ttk.Treeview(self.results_container, columns=columns, show="tree headings", height=15, style="Excel.Treeview")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (Excel-style)
        self.results_tree.heading("#0", text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        # –ú–∞—Ç–µ—Ä–∏–∞–ª (–∏—Å—Ç–æ—á–Ω–∏–∫)
        self.results_tree.heading("material_code", text="–ö–æ–¥ –æ–±–æ—Ä.")
        self.results_tree.heading("material_manufacturer", text="–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å")
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        self.results_tree.heading("variant_name", text="–ù–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∞–π—Å)")
        self.results_tree.heading("price_article", text="–ê—Ä—Ç–∏–∫—É–ª")
        self.results_tree.heading("price_brand", text="–ë—Ä–µ–Ω–¥")
        self.results_tree.heading("relevance", text="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å %")
        # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.results_tree.heading("etm_code", text="–ö–û–î ETM")
        self.results_tree.heading("price", text="–¶–µ–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ (Excel-style)
        self.results_tree.column("#0", width=280, minwidth=220, anchor="w")  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
        # –ú–∞—Ç–µ—Ä–∏–∞–ª (–∏—Å—Ç–æ—á–Ω–∏–∫)
        self.results_tree.column("material_code", width=100, minwidth=80, anchor="center")
        self.results_tree.column("material_manufacturer", width=130, minwidth=100, anchor="w")
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        self.results_tree.column("variant_name", width=220, minwidth=180, anchor="w")
        self.results_tree.column("price_article", width=130, minwidth=100, anchor="center")
        self.results_tree.column("price_brand", width=110, minwidth=90, anchor="w")
        self.results_tree.column("relevance", width=90, minwidth=70, anchor="center")
        # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.results_tree.column("etm_code", width=100, minwidth=80, anchor="center")
        self.results_tree.column("price", width=110, minwidth=90, anchor="e")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Excel-like —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏
        self.results_tree.tag_configure("material_columns",
                                       background="#F0F8FF",  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–±–æ–ª–µ–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π)
                                       font=('Segoe UI', 9))
        self.results_tree.tag_configure("price_columns",
                                       background="#FFF8F0",  # –°–≤–µ—Ç–ª–æ-–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ (–±–æ–ª–µ–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π)
                                       font=('Segoe UI', 9))
        self.results_tree.tag_configure("selected_variant",
                                       background="#E6FFE6",
                                       foreground="#006400",  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                                       font=('Segoe UI', 9, 'bold'))
        self.results_tree.tag_configure("material_with_selection",
                                       background="#E6F3FF",
                                       foreground="#003D82",  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º
                                       font=('Segoe UI', 9, 'bold'))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (Excel-like —Ü–≤–µ—Ç–∞)
        self.results_tree.tag_configure("high",
                                       background="#E6F7E6",  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                                       foreground="#006400",  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                                       font=('Segoe UI', 9, 'bold'))
        self.results_tree.tag_configure("medium",
                                       background="#FFF8E1",  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
                                       foreground="#FF8C00",  # –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–∫—Å—Ç
                                       font=('Segoe UI', 9))
        self.results_tree.tag_configure("low",
                                       background="#FFE6E6",  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
                                       foreground="#B22222",  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
                                       font=('Segoe UI', 9))
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_v_scroll = ttk.Scrollbar(self.results_container, orient=tk.VERTICAL, command=self.results_tree.yview)
        results_h_scroll = ttk.Scrollbar(self.results_container, orient=tk.HORIZONTAL, command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=results_v_scroll.set, xscrollcommand=results_h_scroll.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_tree.grid(row=0, column=0, sticky="nsew")
        results_v_scroll.grid(row=0, column=1, sticky="ns")
        results_h_scroll.grid(row=1, column=0, sticky="ew")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_container.grid_rowconfigure(0, weight=1)
        self.results_container.grid_columnconfigure(0, weight=1)
        
        # –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ/–¥–≤–æ–π–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        self.results_tree.bind("<Button-1>", self.on_smart_click)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.log_message("üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–µ—Ä–µ–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤")
        self.status_label = ttk.Label(self.status_frame, textvariable=self.status_var)
        self.status_label.pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Elasticsearch
        self.es_indicator = ttk.Label(self.status_frame, text="‚óè", foreground="red")
        self.es_indicator.pack(side=tk.RIGHT, padx=5)
        
        self.es_status_text = ttk.Label(self.status_frame, text="Elasticsearch: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.es_status_text.pack(side=tk.RIGHT, padx=5)
    
    def update_threshold_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ—Ä–æ–≥–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏"""
        self.threshold_label.config(text=f"{float(value):.1f}%")
    
    def check_elasticsearch_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Elasticsearch"""
        def check():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                if self.app.es_service.check_connection():
                    self.root.after(0, lambda: self.update_es_status(True))
                else:
                    self.root.after(0, lambda: self.update_es_status(False))
            except Exception as e:
                self.root.after(0, lambda: self.update_es_status(False, str(e)))
        
        threading.Thread(target=check, daemon=True).start()
    
    def update_es_status(self, connected, error=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Elasticsearch"""
        if connected:
            self.es_indicator.config(foreground="green")
            self.es_status_text.config(text="Elasticsearch: –ü–æ–¥–∫–ª—é—á–µ–Ω")
            self.start_button.config(state="normal" if self.materials and self.price_items else "disabled")
        else:
            self.es_indicator.config(foreground="red")
            self.es_status_text.config(text="Elasticsearch: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            error_msg = f"[ERROR] Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            if error:
                error_msg += f": {error}"
            self.start_button.config(state="disabled")
    
    def check_elasticsearch(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""
        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...")
        self.check_elasticsearch_status()
    
    def setup_indices(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ Elasticsearch"""
        def create_indices():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤..."))
                
                if self.app.setup_indices():
                    self.root.after(0, lambda: self.log_message("[OK] –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                else:
                    self.root.after(0, lambda: self.log_message("[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤!"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=create_indices, daemon=True).start()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏...
    
    def load_materials_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        filename = filedialog.askopenfilename(
            parent=self.root,
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            initialdir=os.getcwd(),
            filetypes=[
                ("–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ", "*.csv;*.xlsx;*.json"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filename:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.materials = []
            self.materials_order = []
            self.results = {}
            self.selected_variants = {}

            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if hasattr(self, 'results_tree') and self.results_tree:
                for item in self.results_tree.get_children():
                    self.results_tree.delete(item)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∫–∞–∫ –µ—Å—Ç—å)
            self.materials_info_label.config(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", foreground="red")

            self.materials_path_var.set(filename)
            self.log_message(f"[INFO] –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {os.path.basename(filename)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            threading.Thread(target=self.load_materials_data, daemon=True).start()
    
    def load_materials_auto(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ material"""
        materials_dir = os.path.join(os.getcwd(), "material")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not os.path.exists(materials_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ 'material' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–û–∂–∏–¥–∞–µ—Ç—Å—è: {materials_dir}")
            return
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        supported_extensions = ['.csv', '.xlsx', '.json']
        material_files = []
        
        for file in os.listdir(materials_dir):
            file_path = os.path.join(materials_dir, file)
            if os.path.isfile(file_path):
                _, ext = os.path.splitext(file.lower())
                if ext in supported_extensions:
                    material_files.append(file_path)
        
        if not material_files:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 f"–í –ø–∞–ø–∫–µ 'material' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!\n"
                                 f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_extensions)}")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.materials_path_var.set(material_files[0])
        self.load_materials_from_directory(materials_dir)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤—Å–µ–π –ø–∞–ø–∫–∏
    
    def load_pricelist_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)"""
        filenames = filedialog.askopenfilenames(
            parent=self.root,
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            initialdir=os.getcwd(),
            filetypes=[
                ("–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ", "*.csv;*.xlsx;*.json"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filenames:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
            self.price_items = []
            self.results = {}
            self.selected_variants = {}

            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if hasattr(self, 'results_tree') and self.results_tree:
                for item in self.results_tree.get_children():
                    self.results_tree.delete(item)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
            self.pricelist_info_label.config(text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground="red")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –≤ pricelist_path_var)
            self.pricelist_path_var.set(filenames[0])
            self.selected_pricelist_files = list(filenames)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã

            file_count = len(filenames)
            file_names = ", ".join([os.path.basename(f) for f in filenames])
            self.log_message(f"[INFO] –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {file_count}")
            self.log_message(f"[INFO] –§–∞–π–ª—ã: {file_names}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            threading.Thread(target=self.load_multiple_pricelist_files, daemon=True).start()

    def load_multiple_pricelist_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        if not hasattr(self, 'selected_pricelist_files') or not self.selected_pricelist_files:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"))
            return

        try:
            if self.app is None:
                self.app = MaterialMatcherApp(self.config)

            self.root.after(0, lambda: self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤..."))

            all_price_items = []
            loaded_files = []
            total_files = len(self.selected_pricelist_files)

            for i, file_path in enumerate(self.selected_pricelist_files, 1):
                try:
                    self.root.after(0, lambda f=file_path, curr=i, total=total_files:
                        self.status_var.set(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {curr}/{total}: {os.path.basename(f)}..."))

                    self.root.after(0, lambda f=file_path:
                        self.log_message(f"[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {os.path.basename(f)}"))

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                    price_items = self.app.load_price_list(file_path)

                    if price_items:
                        all_price_items.extend(price_items)
                        loaded_files.append(os.path.basename(file_path))
                        self.root.after(0, lambda f=file_path, count=len(price_items):
                            self.log_message(f"[SUCCESS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {os.path.basename(f)}"))
                    else:
                        self.root.after(0, lambda f=file_path:
                            self.log_message(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {os.path.basename(f)}"))

                except Exception as e:
                    self.root.after(0, lambda f=file_path, err=str(e):
                        self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {os.path.basename(f)}: {err}"))
                    continue

            if all_price_items:
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
                unique_items = {}
                for item in all_price_items:
                    unique_items[item.id] = item
                final_items = list(unique_items.values())

                self.price_items = final_items

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                def update_ui():
                    total_items = len(final_items)
                    files_info = f"{len(loaded_files)} —Ñ–∞–π–ª–æ–≤: {', '.join(loaded_files)}"
                    self.update_pricelist_info(total_items)
                    self.pricelist_info_label.config(
                        text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_items} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {files_info}",
                        foreground="green"
                    )
                    self.status_var.set("–ì–æ—Ç–æ–≤")
                    self.update_start_button_state()

                self.root.after(0, update_ui)
                self.root.after(0, lambda: self.log_message(
                    f"[SUCCESS] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã: {len(final_items)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ {len(loaded_files)} —Ñ–∞–π–ª–æ–≤"))

            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))

        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤: {e}"))
            self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))

    def load_pricelist_auto(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ price-list"""
        pricelist_dir = os.path.join(os.getcwd(), "price-list")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not os.path.exists(pricelist_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ 'price-list' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–û–∂–∏–¥–∞–µ—Ç—Å—è: {pricelist_dir}")
            return
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        supported_extensions = ['.csv', '.xlsx', '.json']
        pricelist_files = []
        
        for file in os.listdir(pricelist_dir):
            file_path = os.path.join(pricelist_dir, file)
            if os.path.isfile(file_path):
                _, ext = os.path.splitext(file.lower())
                if ext in supported_extensions:
                    pricelist_files.append(file_path)
        
        if not pricelist_files:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 f"–í –ø–∞–ø–∫–µ 'price-list' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤!\n"
                                 f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_extensions)}")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.pricelist_path_var.set(pricelist_files[0])
        self.load_pricelist_from_directory(pricelist_dir)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤—Å–µ–π –ø–∞–ø–∫–∏
    
    def load_materials_from_directory(self, directory_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        try:
            self.status_var.set("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            def load_materials_thread():
                all_materials = []
                supported_extensions = ['.csv', '.xlsx', '.json']
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                material_files = []
                for file in os.listdir(directory_path):
                    file_path = os.path.join(directory_path, file)
                    if os.path.isfile(file_path):
                        _, ext = os.path.splitext(file.lower())
                        if ext in supported_extensions:
                            material_files.append((file, file_path))
                
                if not material_files:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
                    return
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress_var.set(0)
                self.progress_bar['maximum'] = len(material_files)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
                for i, (filename, file_path) in enumerate(material_files):
                    self.root.after(0, lambda f=filename: self.status_var.set(f"–ó–∞–≥—Ä—É–∂–∞–µ–º: {f}"))
                    try:
                        if file_path.endswith('.csv'):
                            from src.utils.data_loader import MaterialLoader
                            materials = MaterialLoader.load_from_csv(file_path)
                        elif file_path.endswith('.xlsx'):
                            from src.utils.data_loader import MaterialLoader
                            materials = MaterialLoader.load_from_excel(file_path)
                        elif file_path.endswith('.json'):
                            from src.utils.data_loader import MaterialLoader
                            materials = MaterialLoader.load_from_json(file_path)
                        else:
                            continue
                        
                        all_materials.extend(materials)
                        self.progress_var.set(i + 1)
                        self.root.update_idletasks()
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.materials = all_materials
                self.materials_order = [m.id for m in all_materials]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.root.after(0, lambda: self.update_materials_info(len(all_materials)))
                self.root.after(0, lambda: self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(all_materials)} –∏–∑ {len(material_files)} —Ñ–∞–π–ª–æ–≤"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=load_materials_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n{str(e)}")
            self.status_var.set("–ì–æ—Ç–æ–≤")
    
    def load_pricelist_from_directory(self, directory_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        try:
            self.status_var.set("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –∏–∑ –ø–∞–ø–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            def load_pricelist_thread():
                all_price_items = []
                supported_extensions = ['.csv', '.xlsx', '.json']
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                pricelist_files = []
                for file in os.listdir(directory_path):
                    file_path = os.path.join(directory_path, file)
                    if os.path.isfile(file_path):
                        _, ext = os.path.splitext(file.lower())
                        if ext in supported_extensions:
                            pricelist_files.append((file, file_path))
                
                if not pricelist_files:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
                    return
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress_var.set(0)
                self.progress_bar['maximum'] = len(pricelist_files)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
                for i, (filename, file_path) in enumerate(pricelist_files):
                    self.root.after(0, lambda f=filename: self.status_var.set(f"–ó–∞–≥—Ä—É–∂–∞–µ–º: {f}"))
                    try:
                        if file_path.endswith('.csv'):
                            from src.utils.data_loader import PriceListLoader
                            price_items = PriceListLoader.load_from_csv(file_path)
                        elif file_path.endswith('.xlsx'):
                            from src.utils.data_loader import PriceListLoader
                            price_items = PriceListLoader.load_from_excel(file_path)
                        elif file_path.endswith('.json'):
                            from src.utils.data_loader import PriceListLoader
                            price_items = PriceListLoader.load_from_json(file_path)
                        else:
                            continue
                        
                        all_price_items.extend(price_items)
                        self.progress_var.set(i + 1)
                        self.root.update_idletasks()
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.price_items = all_price_items
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.root.after(0, lambda: self.update_pricelist_info(len(all_price_items)))
                self.root.after(0, lambda: self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {len(all_price_items)} –∏–∑ {len(pricelist_files)} —Ñ–∞–π–ª–æ–≤"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=load_pricelist_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤:\n{str(e)}")
            self.status_var.set("–ì–æ—Ç–æ–≤")
    
    def load_materials_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        if not self.materials_path_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            return
        
        def load():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
                
                materials = self.app.load_materials(self.materials_path_var.get())
                if materials:
                    self.materials = materials
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    self.materials_order = [material.id for material in materials]
                    self.root.after(0, lambda: self.update_materials_info(len(materials)))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    self.root.after(100, lambda: self.update_materials_preview(materials))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=load, daemon=True).start()
    
    def load_pricelist_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        if not self.pricelist_path_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
            return
        
        def load():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞..."))
                
                price_items = self.app.load_price_list(self.pricelist_path_var.get())
                if price_items:
                    self.price_items = price_items
                    self.root.after(0, lambda: self.update_pricelist_info(len(price_items)))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    self.root.after(100, lambda: self.update_pricelist_preview(price_items))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=load, daemon=True).start()
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã...
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
    
    def copy_log_to_clipboard(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            log_content = self.log_text.get("1.0", tk.END)
            self.root.clipboard_clear()
            self.root.clipboard_append(log_content)
            self.root.update()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥: {e}")
    
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ª–æ–≥?"):
            self.log_text.delete("1.0", tk.END)
            self.log_message("üóëÔ∏è –õ–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def new_project(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        if messagebox.askyesno("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç?"):
            self.clear_data()
            self.results = {}
            self.refresh_results()
            self.log_message("[INFO] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

1. –ü–û–î–ì–û–¢–û–í–ö–ê:
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Elasticsearch –∑–∞–ø—É—â–µ–Ω
   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∞–π–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ (CSV, Excel, JSON)

2. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"

3. –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏, –∫–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"

4. –†–ï–ó–£–õ–¨–¢–ê–¢–´:
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ JSON, CSV –∏–ª–∏ Excel –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

5. –ü–û–ò–°–ö:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ü–æ–∏—Å–∫" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        """
        
        help_window = tk.Toplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞")
        help_window.geometry("600x500")
        
        text_widget = scrolledtext.ScrolledText(help_window, wrap=tk.WORD)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_widget.insert(tk.END, help_text.strip())
        text_widget.config(state=tk.DISABLED)
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
            "–°–∏—Å—Ç–µ–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ v1.0\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π\n"
            "–º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Elasticsearch –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n"
            "–¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "¬© 2025 Material Matcher")
    
    def update_materials_info(self, count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
        self.materials_info_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", foreground="green")
    
    def update_pricelist_info(self, count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ"""
        self.pricelist_info_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø–æ–∑–∏—Ü–∏–π", foreground="green")
    
    
    
    def update_start_button_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        self.log_message(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏: materials={len(self.materials) if self.materials else 0}, price_items={len(self.price_items) if self.price_items else 0}, app={self.app is not None}")
        
        if self.materials and self.price_items and self.app:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º bypass mode –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch
            def check():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º bypass mode
                    if hasattr(self.app, 'matching_service') and hasattr(self.app.matching_service, 'bypass_elasticsearch') and self.app.matching_service.bypass_elasticsearch:
                        self.root.after(0, lambda: self._set_start_button_state(True, True))  # bypass_mode=True
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch
                    connected = self.app.es_service.check_connection()
                    self.root.after(0, lambda: self._set_start_button_state(connected, False))
                except:
                    self.root.after(0, lambda: self._set_start_button_state(False, False))
            
            threading.Thread(target=check, daemon=True).start()
        else:
            self.start_button.config(state="disabled")
    
    def _set_start_button_state(self, es_connected, bypass_mode=False):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        if self.materials and self.price_items and (es_connected or bypass_mode):
            self.start_button.config(state="normal")
            if bypass_mode:
                self.log_message(f"[DEBUG] –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ö–æ–¥–∞!")
            else:
                self.log_message(f"[DEBUG] –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å Elasticsearch!")
        else:
            self.start_button.config(state="disabled")
    
    def index_data(self, show_warning=True):
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not self.materials and not self.price_items:
            if show_warning:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
        
        def index():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."))
                self.root.after(0, lambda: self.log_message("[INFO] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö..."))
                
                if self.app.index_data(self.materials, self.price_items):
                    self.root.after(0, lambda: self.log_message("[OK] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, self.update_start_button_state)
                else:
                    self.root.after(0, lambda: self.log_message("[WARNING] –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Elasticsearch! –ü—Ä–æ–±—É–µ–º —Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞..."))
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ Elasticsearch
                    if self.price_items and self.app.enable_bypass_mode(self.price_items):
                        self.root.after(0, lambda: self.log_message("[OK] –†–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ Elasticsearch –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞–º—è—Ç–∏."))
                        self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤ (—Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞)"))
                        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                        self.root.after(100, self.update_start_button_state)
                        self.root.after(500, self.update_start_button_state)  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    else:
                        self.root.after(0, lambda: self.log_message("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞!"))
                        self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º bypass mode –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
                try:
                    if self.price_items and hasattr(self, 'app') and self.app:
                        if self.app.enable_bypass_mode(self.price_items):
                            self.root.after(0, lambda: self.log_message("[OK] Bypass mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏!"))
                            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤ (—Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞)"))
                            self.root.after(100, self.update_start_button_state)
                            self.root.after(500, self.update_start_button_state)  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                except Exception as bypass_error:
                    self.root.after(0, lambda: self.log_message(f"[ERROR] Bypass mode failed: {bypass_error}"))
        
        threading.Thread(target=index, daemon=True).start()
        return True
    
    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.materials = []
        self.materials_order = []
        self.price_items = []
        self.results = {}
        self.selected_variants = {}
        self.selected_pricelist_files = []

        # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.materials_path_var.set("")
        self.pricelist_path_var.set("")
        self.materials_info_label.config(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", foreground="red")
        self.pricelist_info_label.config(text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground="red")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        
        self.start_button.config(state="disabled")
        self.log_message("üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    def run_full_matching(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if not self.materials or not self.price_items:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config['matching']['similarity_threshold'] = self.threshold_var.get()
        self.config['matching']['max_results_per_material'] = self.max_results_var.get()
        self.config['matching']['max_workers'] = self.workers_var.get()
        
        self.matching_cancelled = False
        
        def matching():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.root.after(0, lambda: self.start_button.config(state="disabled"))
                self.root.after(0, lambda: self.stop_button.config(state="normal"))
                self.root.after(0, lambda: self.progress_bar.start(10) if hasattr(self, 'progress_bar') and self.progress_bar else None)
                self.root.after(0, lambda: self.progress_var.set("–ó–∞–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è..."))
                self.root.after(0, lambda: self.status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ..."))
                self.root.after(0, lambda: self.log_message("[START] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                self.root.after(0, lambda: self.log_message(f"[DEBUG] –ü–µ—Ä–µ–¥–∞–µ–º {len(self.materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ run_matching"))
                results = self.app.run_matching(self.materials)
                
                self.root.after(0, lambda: self.log_message(f"[DEBUG] –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {type(results)}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {len(results) if results else 0}"))
                
                if results:
                    # –ü–æ—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    total_matches = sum(len(matches) for matches in results.values())
                    self.root.after(0, lambda: self.log_message(f"[DEBUG] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {total_matches}"))
                
                if not self.matching_cancelled:
                    self.results = results
                    self.root.after(0, lambda: self.update_results_display())
                    if results:
                        self.root.after(0, lambda: self.log_message("[OK] –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"))
                        self.root.after(0, lambda: self.notebook.select(1))  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                    else:
                        self.root.after(0, lambda: self.log_message("[WARNING] –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
                else:
                    self.root.after(0, lambda: self.log_message("[STOP] –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"))
                
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}"))
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
                self.root.after(0, lambda: self.start_button.config(state="normal"))
                self.root.after(0, lambda: self.stop_button.config(state="disabled"))
                self.root.after(0, lambda: self.progress_bar.stop() if hasattr(self, 'progress_bar') and self.progress_bar else None)
                self.root.after(0, lambda: self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"))
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
        
        threading.Thread(target=matching, daemon=True).start()
    
    def stop_matching(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        self.matching_cancelled = True
        self.stop_button.config(state="disabled")
        self.log_message("[STOP] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
    
    def update_results_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        # DEBUG: –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
        if not hasattr(self, '_update_display_call_count'):
            self._update_display_call_count = 0
        self._update_display_call_count += 1
        
        self.log_message(f"[DEBUG] === –í–´–ó–û–í update_results_display #{self._update_display_call_count} ===")
        self.log_message(f"[DEBUG] –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ self.results: {hasattr(self, 'results')}")
        if hasattr(self, 'results'):
            self.log_message(f"[DEBUG] –†–∞–∑–º–µ—Ä self.results: {len(self.results) if self.results else 0}")
        self.log_message("[INFO] –ù–ê–ß–ê–õ–û update_results_display()")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        expanded_materials = set()
        for item in self.results_tree.get_children():
            material_name = self.results_tree.item(item, 'text')
            # –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—ã–º –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ò –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            # –ò–õ–ò –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–Ω–∞—á–∏—Ç –±—ã–ª –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç)
            has_children = len(self.results_tree.get_children(item)) > 0
            is_open = self.results_tree.item(item, 'open')
            
            if (has_children and is_open) or not has_children:
                # –û—á–∏—â–∞–µ–º –æ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
                clean_name = material_name.split(' > ')[0] if ' > ' in material_name else material_name
                expanded_materials.add(clean_name)
                self.log_message(f"   üìã –°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã—Ç—ã–π: '{clean_name}' (–¥–µ—Ç–∏: {has_children}, –æ—Ç–∫—Ä—ã—Ç: {is_open})")
        
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        current_items = self.results_tree.get_children()
        self.log_message(f"[DEBUG] –£–¥–∞–ª—è–µ–º {len(current_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–µ—Ä–µ–≤–∞")
        for item in current_items:
            self.results_tree.delete(item)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.formatter = MatchingResultFormatter(max_matches=7)
        
        # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.log_message(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ self.results: {len(self.results)}")
        self.log_message(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ self.materials_order: {len(self.materials_order) if self.materials_order else 0}")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ self.results
        for i, (material_id, search_results) in enumerate(list(self.results.items())[:2]):  # –ü–µ—Ä–≤—ã–µ 2 –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            self.log_message(f"[DEBUG] === –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ {i+1} ===")
            self.log_message(f"[DEBUG] Material ID: {material_id}")
            self.log_message(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SearchResult –æ–±—ä–µ–∫—Ç–æ–≤: {len(search_results)}")

            for j, search_result in enumerate(search_results[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                price_item = search_result.price_item
                self.log_message(f"[DEBUG]   SearchResult {j+1}:")
                self.log_message(f"[DEBUG]     price_item.id: '{price_item.id}'")
                self.log_message(f"[DEBUG]     price_item.name: '{price_item.name[:50]}...'")
                self.log_message(f"[DEBUG]     price_item.material_name: '{price_item.material_name}'")

                if not price_item.id or price_item.id.strip() == "":
                    self.log_message(f"[DEBUG]     ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: price_item.id –ø—É—Å—Ç–æ–π –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
                break  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        
        formatted_results = self.formatter.format_matching_results(self.results, self.materials_order, self.materials)

        # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.log_message(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(formatted_results)}")

        # –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –§–û–†–ú–ê–¢–¢–ï–†–ê (–ø–µ—Ä–≤—ã–µ 2 –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
        for i, result in enumerate(formatted_results[:2]):
            material_id = result.get("material_id")
            material_name = result.get("material_name")
            matches = result.get("matches", [])
            self.log_message(f"[DEBUG] === –ú–ê–¢–ï–†–ò–ê–õ {i+1} ===")
            self.log_message(f"[DEBUG] ID: {material_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{material_name}'")
            self.log_message(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(matches)}")

            for j, match in enumerate(matches[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                variant_id = match.get("variant_id", "")
                variant_name = match.get("variant_name", "")
                self.log_message(f"[DEBUG]   –í–∞—Ä–∏–∞–Ω—Ç {j+1}: variant_id='{variant_id}', name='{variant_name[:50]}...'")
                if not variant_id or variant_id.strip() == "":
                    self.log_message(f"[DEBUG]   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: variant_id –ø—É—Å—Ç–æ–π –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.formatter.get_statistics()
        
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
        if not expanded_materials:
            expanded_materials = set([result["material_name"] for result in formatted_results])
        
        for i, result in enumerate(formatted_results):
            material_name = result["material_name"]
            material_id = result["material_id"]
            matches = result["matches"]
            
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            self.log_message(f"[DEBUG] –ú–∞—Ç–µ—Ä–∏–∞–ª {i+1}: ID={material_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ={material_name[:50]}...")
            
            if matches:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–∏
                material_data = None
                for material in self.materials:
                    if material.id == result['material_id']:
                        material_data = material
                        break
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–∏ —Å fallback –∏–∑ –ª—É—á—à–µ–≥–æ match
                material_code = "-"
                material_manufacturer = "-"
                
                if material_data:
                    material_code = material_data.equipment_code or ""
                    material_manufacturer = material_data.manufacturer or ""

                    # –ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å –±–µ—Ä—É—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Ñ–∞–π–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç—ã–µ, —Å—Ç–∞–≤–∏–º –ø—Ä–æ—á–µ—Ä–∫
                material_code = material_code or "-"
                material_manufacturer = material_manufacturer or "-"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                parent = self.results_tree.insert("", tk.END, 
                    text=f"{i+1}. {material_name}",
                    values=(
                        material_code,          # material_code (–≥–æ–ª—É–±–æ–π)
                        material_manufacturer,  # material_manufacturer (–≥–æ–ª—É–±–æ–π)
                        "",                    # variant_name (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                        "",                    # price_article (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                        "",                    # price_brand (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                        "",                    # relevance (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                        "",                    # etm_code (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                        ""                     # price (–ø—É—Å—Ç–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
                    ),
                    tags=("material", "material_columns")
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-7 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º)
                for i, match in enumerate(matches[:7], 1):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    variant_name = match["variant_name"]
                    relevance = f"{match['relevance']*100:.1f}%"
                    price = f"{match['price']:.2f} RUB" if match['price'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    
                    # –î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≥–æ–ª—É–±—ã–µ —Å—Ç–æ–ª–±—Ü—ã) - –ø—É—Å—Ç—ã–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
                    material_code = ""
                    material_manufacturer = ""
                    
                    # –î–∞–Ω–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ (—Ä–æ–∑–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã)
                    price_brand = match.get("brand", "-") or "-"
                    price_article = match.get("article", "-") or "-"

                    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü variant_id –¥–ª—è ETM –∫–æ–¥–∞
                    variant_id = match.get("variant_id", "")

                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø ETM –ö–û–î–ê
                    if i < 3:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        self.log_message(f"[ETM DEBUG] –í–∞—Ä–∏–∞–Ω—Ç {i+1}:")
                        self.log_message(f"[ETM DEBUG]   match keys: {list(match.keys())}")
                        self.log_message(f"[ETM DEBUG]   variant_id raw: {repr(variant_id)}")
                        self.log_message(f"[ETM DEBUG]   variant_id type: {type(variant_id)}")

                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å ID
                        alternative_ids = []
                        for key in ['id', 'article', 'brand_code', 'cli_code']:
                            value = match.get(key, "")
                            if value and str(value).strip():
                                alternative_ids.append(f"{key}={repr(value)}")

                        if alternative_ids:
                            self.log_message(f"[ETM DEBUG]   alternative_ids: {', '.join(alternative_ids)}")

                    if variant_id and str(variant_id).strip():
                        etm_code = str(variant_id).strip()
                    else:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ variant_id –ø—É—Å—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
                        etm_code = "-"

                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: article -> id -> brand_code)
                        for fallback_key in ['article', 'id', 'brand_code']:
                            fallback_value = match.get(fallback_key, "")
                            if fallback_value and str(fallback_value).strip():
                                etm_code = str(fallback_value).strip()
                                if i < 3:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                                    self.log_message(f"[ETM FIX] –ò—Å–ø–æ–ª—å–∑—É–µ–º {fallback_key} –∫–∞–∫ ETM –∫–æ–¥: '{etm_code}'")
                                break

                    if i < 3:
                        self.log_message(f"[DEBUG] –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã - –º–∞—Ç–µ—Ä–∏–∞–ª {material_name}, –≤–∞—Ä–∏–∞–Ω—Ç {i+1}:")
                        self.log_message(f"[DEBUG]   variant_id: '{variant_id}'")
                        self.log_message(f"[DEBUG]   –í —Å—Ç–æ–ª–±—Ü–µ –ö–û–î ETM –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è: '{etm_code}'")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    tag = "high" if match['relevance'] > 0.7 else "medium" if match['relevance'] > 0.4 else "low"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç)
                    color_tags = [tag, "price_columns"]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
                    child = self.results_tree.insert(parent, tk.END, 
                        values=(
                            material_code,          # material_code (–≥–æ–ª—É–±–æ–π)
                            material_manufacturer,  # material_manufacturer (–≥–æ–ª—É–±–æ–π)
                            variant_name,          # variant_name (—Ä–æ–∑–æ–≤—ã–π)
                            price_article,         # price_article (—Ä–æ–∑–æ–≤—ã–π)
                            price_brand,           # price_brand (—Ä–æ–∑–æ–≤—ã–π)
                            relevance,             # relevance (—Ä–æ–∑–æ–≤—ã–π)
                            etm_code,              # etm_code (–ö–û–î ETM)
                            price                  # price
                        ),
                        tags=tuple(color_tags + [f"variant_{result['material_id']}_{i}"])
                    )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–Ω–æ–≤—ã–µ) –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
                should_expand = material_name in expanded_materials if expanded_materials else True
                self.results_tree.item(parent, open=should_expand)
                if should_expand:
                    self.log_message(f"   [OK] –†–∞—Å–∫—Ä—ã–≤–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª: '{material_name}'")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏
        # –¢–µ–≥–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ create_results_tab —Å Excel-like —Å—Ç–∏–ª—è–º–∏
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –≤—ã—à–µ —á–µ—Ä–µ–∑ on_smart_click
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º)
        # if self.view_mode == "table":
        #     self.update_table_view_data()
    
    def on_variant_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        selection = self.results_tree.selection()
        if selection:
            item = self.results_tree.item(selection[0])
            tags = item.get('tags', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª
            for tag in tags:
                if tag.startswith('variant_'):
                    parts = tag.split('_')
                    if len(parts) >= 3:
                        material_id = parts[1]
                        variant_id = parts[2]
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        if hasattr(self, 'formatter'):
                            result = self.formatter.select_variant(material_id, variant_id)
                            if 'error' not in result:
                                self.log_message(f"[OK] –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {variant_id} –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id}")
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                                self.highlight_selected_variant(selection[0])
                            else:
                                self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: {result['error']}")
    
    def highlight_selected_variant(self, item_id):
        """–í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        parent_id = self.results_tree.parent(item_id)
        for child in self.results_tree.get_children(parent_id):
            self.results_tree.item(child, tags=self.results_tree.item(child)['tags'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        current_tags = list(self.results_tree.item(item_id)['tags'])
        if 'selected' not in current_tags:
            current_tags.append('selected')
        self.results_tree.item(item_id, tags=current_tags)
        self.results_tree.tag_configure('selected', background='lightblue', font=('Arial', 10, 'bold'))
    
    def on_smart_click(self, event):
        """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∏ –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        import time
        
        try:
            item = self.results_tree.identify('item', event.x, event.y)
            current_time = int(time.time() * 1000)  # –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if not item:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
            if (item == self.last_click_item and 
                current_time - self.last_click_time < self.double_click_delay):
                
                # –≠—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫!
                self.log_message("üî• –î–í–û–ô–ù–û–ô –ö–õ–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù! (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
                self.handle_double_click(event, item)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                self.last_click_item = None
                self.last_click_time = 0
                
            else:
                # –≠—Ç–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
                self.last_click_item = item
                self.last_click_time = current_time
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                column = self.results_tree.identify('column', event.x, event.y)
                region = self.results_tree.identify('region', event.x, event.y)
                parent = self.results_tree.parent(item)
                item_text = self.results_tree.item(item, 'text')
                item_values = self.results_tree.item(item, 'values')
                item_tags = self.results_tree.item(item, 'tags')
                
                self.log_message(f"üñ±Ô∏è –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫: —ç–ª–µ–º–µ–Ω—Ç={item}, –∫–æ–ª–æ–Ω–∫–∞={column}, —Ä–µ–≥–∏–æ–Ω={region}")
                self.log_message(f"   –†–æ–¥–∏—Ç–µ–ª—å: {parent}, –¢–µ–∫—Å—Ç: '{item_text}', –¢–µ–≥–∏: {item_tags}")
                if item_values:
                    self.log_message(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {item_values}")
                    
        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
    
    def handle_double_click(self, event, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏
            column = self.results_tree.identify('column', event.x, event.y)
            
            if not item:
                self.log_message("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É (–¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç), –∞ –Ω–µ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
            parent = self.results_tree.parent(item)
            if not parent:  # –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É, –∞ –Ω–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É
                self.log_message("‚ÑπÔ∏è –ö–ª–∏–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–Ω–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É)")
                return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.log_message(f"[SEARCH] –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: —ç–ª–µ–º–µ–Ω—Ç={item}, –∫–æ–ª–æ–Ω–∫–∞={column}, —Ä–æ–¥–∏—Ç–µ–ª—å={parent}")
        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è material_id –∏ variant_id
        tags = self.results_tree.item(item, 'tags')
        self.log_message(f"üè∑Ô∏è –¢–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {tags}")
        
        variant_tag = None
        for tag in tags:
            if tag.startswith('variant_'):
                variant_tag = tag
                break
        
        if not variant_tag:
            self.log_message(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ {tags}")
            return
        
        self.log_message(f"[OK] –ù–∞–π–¥–µ–Ω —Ç–µ–≥ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_tag}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º material_id –∏–∑ —Ç–µ–≥–∞ (—Ñ–æ—Ä–º–∞—Ç: variant_material_id_variant_id)
        try:
            parts = variant_tag.split('_')
            if len(parts) < 3:
                self.log_message(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: {variant_tag}")
                return
            
            material_id = parts[1]
            variant_id = parts[2]
            
            self.log_message(f"üìã Material ID: {material_id}, Variant ID: {variant_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            values = self.results_tree.item(item, 'values')
            if not values:
                self.log_message(f"[ERROR] –ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item}")
                return
                
            self.log_message(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {values}")
        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ values
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ('material_code', 'material_manufacturer', 'variant_name', 'price_article', 'price_brand', 'relevance', 'etm_code', 'price')
        variant_name = values[2] if len(values) > 2 else ""     # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        article = values[3] if len(values) > 3 else ""          # –ê—Ä—Ç–∏–∫—É–ª
        brand = values[4] if len(values) > 4 else ""            # –ë—Ä–µ–Ω–¥
        relevance = values[5] if len(values) > 5 else ""        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
        etm_code = values[6] if len(values) > 6 else ""         # –ö–û–î ETM (id —Ç–æ–≤–∞—Ä–∞)
        price = values[7] if len(values) > 7 else ""            # –¶–µ–Ω–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        self.selected_variants[material_id] = {
            'variant_id': variant_id,
            'variant_name': variant_name,
            'relevance': relevance,
            'price': price,
            'brand': brand,
            'article': article,
            'etm_code': etm_code,
            'item_id': item
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ø–æ–¥–Ω–∏–º–∞–µ–º –µ–≥–æ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
        self.log_message("üîß –ù–ê–ß–ò–ù–ê–Æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")
        self.update_selected_variant_display(parent, item, variant_name)
        
        # –î–ê–ï–ú –í–†–ï–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –£–í–ò–î–ï–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–Ø, –∑–∞—Ç–µ–º —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º
        self.log_message("‚è≥ –î–∞—ë–º –≤—Ä–µ–º—è —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ–º...")
        self.root.after(100, lambda: self.delayed_collapse(parent, item))
        
        # –ö–û–†–ù–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ,
        # —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∞ —Ç–æ–ª—å–∫–æ —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        self.log_message("[OK] –ö–û–†–ù–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        material_name = self.results_tree.item(parent, 'text')
        self.log_message(f"[OK] –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è '{material_name}': {variant_name}")
    
    def delayed_collapse(self, parent_item, selected_item):
        """–û–¢–õ–û–ñ–ï–ù–ù–û–ï –°–•–õ–û–ü–´–í–ê–ù–ò–ï: –î–∞—ë–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        self.log_message("üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞")
        self.hide_other_variants(parent_item, selected_item)
    
    def hide_other_variants(self, parent_item, selected_item):
        """–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ù–ò–ß–ï–ì–û –ù–ï –î–ï–õ–ê–ï–ú —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ - —Ç–æ–ª—å–∫–æ —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        children = list(self.results_tree.get_children(parent_item))
        
        # –ù–ï –¢–†–û–ì–ê–ï–ú –í–ê–†–ò–ê–ù–¢–´ –í–û–û–ë–©–ï! –î–∞–∂–µ –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º
        # –ü—Ä–æ—Å—Ç–æ —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        self.results_tree.item(parent_item, open=False)
        
        self.log_message(f"üìÅ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª (—Å–∫—Ä—ã–≤–∞–µ–º {len(children)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)")
        self.log_message("üö´ –í–∞—Ä–∏–∞–Ω—Ç—ã –ù–ï –∏–∑–º–µ–Ω–µ–Ω—ã, –ù–ï —É–¥–∞–ª–µ–Ω—ã, –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")  
        self.log_message("ü§û –ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ –¥—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏")
    
    # –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã - –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    # –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ä–Ω–µ–≤–æ–º—É —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏—è
    
    def update_selected_variant_display(self, parent_item, selected_item, variant_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            selected_values = self.results_tree.item(selected_item, 'values')
            material_name = self.results_tree.item(parent_item, 'text')

            if not selected_values:
                self.log_message("[ERROR] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ values –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –±—Ä–µ–Ω–¥, –∞—Ä—Ç–∏–∫—É–ª, –ø–æ—Ö–æ–∂–µ—Å—Ç—å, etm_code, —Ü–µ–Ω–∞)
            current_material_values = list(self.results_tree.item(parent_item, 'values'))

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            if len(current_material_values) >= 8 and len(selected_values) >= 8:
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: (material_code, material_manufacturer, variant_name, price_brand, price_article, relevance, etm_code, price)
                current_material_values[2] = selected_values[2]   # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                current_material_values[3] = selected_values[3]   # –ë—Ä–µ–Ω–¥
                current_material_values[4] = selected_values[4]   # –ê—Ä—Ç–∏–∫—É–ª
                current_material_values[5] = selected_values[5]   # –ü–æ—Ö–æ–∂–µ—Å—Ç—å
                current_material_values[6] = selected_values[6]   # –ö–û–î ETM
                current_material_values[7] = selected_values[7]   # –¶–µ–Ω–∞

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                self.results_tree.item(parent_item, values=current_material_values)
                self.log_message(f"üìä –î–ê–ù–ù–´–ï –í–ê–†–ò–ê–ù–¢–ê –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

            # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            selected_tags = list(self.results_tree.item(selected_item, 'tags'))
            if 'selected_variant' not in selected_tags:
                selected_tags.append('selected_variant')
                self.results_tree.item(selected_item, tags=selected_tags)

            # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º
            parent_tags = list(self.results_tree.item(parent_item, 'tags'))
            if 'material_with_selection' not in parent_tags:
                parent_tags.append('material_with_selection')
                self.results_tree.item(parent_item, tags=parent_tags)

            # –°—Ç–∏–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ create_results_tab —Å Excel-like –¥–∏–∑–∞–π–Ω–æ–º

            self.log_message(f"üé® –í–ò–ó–£–ê–õ–¨–ù–û–ï –í–´–î–ï–õ–ï–ù–ò–ï: –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω—ã —Ü–≤–µ—Ç–æ–º")
            self.log_message(f"[OK] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ TreeView –ù–ï –∏–∑–º–µ–Ω–µ–Ω–∞ - –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ —Å—Ö–ª–æ–ø–Ω—É—Ç—Å—è!")
            self.log_message(f"üìç –í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' –ø–æ–¥–Ω—è—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def refresh_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.results:
            self.update_results_display()
            self.log_message("[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def reset_selections(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤"""
        if not self.selected_variants:
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞")
            return
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä—ã
        self.selected_variants.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.update_results_display()
        
        self.log_message("[INFO] –í—Å–µ –≤—ã–±–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def export_selected_results(self, format_type="xlsx"):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.selected_variants:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        selected_data = []
        for material_id, selected in self.selected_variants.items():
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            for material_id_key, search_results in self.results.items():
                if material_id_key == material_id:
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª
                    material = None
                    for m in self.materials:
                        if m.id == material_id:
                            material = m
                            break
                    
                    if material:
                        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                        for result in search_results:
                            if result.price_item.id == selected['variant_id']:
                                selected_data.append(result.to_dict())
                                break
                    break
        
        if not selected_data:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if filename:
            def export():
                try:
                    self.root.after(0, lambda: self.status_var.set("–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if self.app is None:
                        self.app = MaterialMatcherApp(self.config)
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    from src.utils.data_loader import DataExporter
                    DataExporter.export_results_to_xlsx(selected_data, filename)
                    
                    self.root.after(0, lambda: self.log_message(f"[OK] –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                    
                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {e}"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"))
            
            threading.Thread(target=export, daemon=True).start()
    
    def export_results(self, format_type="json"):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if format_type == "json":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".json",
                filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        elif format_type == "csv":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".csv",
                filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        elif format_type == "xlsx":
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".xlsx",
                filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        else:
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                defaultextension=".json",
                filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        
        if filename:
            def export():
                try:
                    self.root.after(0, lambda: self.status_var.set(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {format_type.upper()}..."))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if hasattr(self, 'formatter'):
                        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON
                        success = self.formatter.export_to_json(
                            filename, 
                            include_unselected=True,
                            pretty=True
                        )
                        if success:
                            self.root.after(0, lambda: self.log_message(f"[OK] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                            self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                        if self.app is None:
                            self.app = MaterialMatcherApp(self.config)
                        self.app.export_results(self.results, filename, format_type)
                        self.root.after(0, lambda: self.log_message(f"[OK] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}"))
                        self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                        self.root.after(0, lambda: messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"))
                        
                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"))
                    self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"))
            
            threading.Thread(target=export, daemon=True).start()
    
    def search_material(self):
        """–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        query = self.search_var.get().strip()
        if not query:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        def search():
            try:
                if self.app is None:
                    self.app = MaterialMatcherApp(self.config)
                
                self.root.after(0, lambda: self.status_var.set("–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                matches = self.app.search_material_by_name(query, top_n=self.search_limit_var.get())
                
                self.root.after(0, lambda: self.update_search_results(query, matches))
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        threading.Thread(target=search, daemon=True).start()
    
    def update_search_results(self, query, matches):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        for item in self.search_tree.get_children():
            self.search_tree.delete(item)
        
        if matches:
            self.log_message(f"[SEARCH] –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è '{query}'")
            
            for i, match in enumerate(matches, 1):
                price_str = f"{match['price_item']['price']} {match['price_item']['currency']}" if match['price_item']['price'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                
                self.search_tree.insert("", tk.END, text=str(i), values=(
                    match['price_item']['material_name'],
                    f"{match['similarity_percentage']:.1f}%",
                    price_str
                ))
        else:
            self.log_message(f"[ERROR] –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.search_tree.insert("", tk.END, text="", values=(
                "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "", ""
            ))


    def copy_debug_logs(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            logs_content = self.debug_logger.get_log_content("main")
            self.root.clipboard_clear()
            self.root.clipboard_append(logs_content)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", 
                              f"–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n"
                              f"–†–∞–∑–º–µ—Ä: {len(logs_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
    
    def show_debug_logs_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –ª–æ–≥–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            logs_window = tk.Toplevel(self.root)
            logs_window.title("–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏")
            logs_window.geometry("800x600")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
            notebook = ttk.Notebook(logs_window)
            notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
            main_frame = ttk.Frame(notebook)
            notebook.add(main_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏")
            
            main_text = scrolledtext.ScrolledText(main_frame, wrap=tk.WORD, font=('Consolas', 10))
            main_text.pack(fill=tk.BOTH, expand=True)
            
            main_logs = self.debug_logger.get_log_content("main")
            main_text.insert(tk.END, main_logs)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            detailed_frame = ttk.Frame(notebook)
            notebook.add(detailed_frame, text="–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
            
            detailed_text = scrolledtext.ScrolledText(detailed_frame, wrap=tk.WORD, font=('Consolas', 9))
            detailed_text.pack(fill=tk.BOTH, expand=True)
            
            detailed_logs = self.debug_logger.get_log_content("detailed")
            detailed_text.insert(tk.END, detailed_logs)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_frame = ttk.Frame(logs_window)
            button_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Button(button_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏", 
                      command=lambda: self._copy_text_to_clipboard(main_logs, "–æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏")).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏", 
                      command=lambda: self._copy_text_to_clipboard(detailed_logs, "–¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏")).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                      command=lambda: self._refresh_logs_window(main_text, detailed_text)).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                      command=lambda: self._clear_debug_logs(main_text, detailed_text)).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                      command=logs_window.destroy).pack(side=tk.RIGHT, padx=5)
                      
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ª–æ–≥–æ–≤: {str(e)}")
    
    def _copy_text_to_clipboard(self, text, description):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            self.root.clipboard_clear()
            self.root.clipboard_append(text)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", 
                              f"{description.capitalize()} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n"
                              f"–†–∞–∑–º–µ—Ä: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    def _refresh_logs_window(self, main_text, detailed_text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ –ª–æ–≥–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
            main_text.delete(1.0, tk.END)
            main_logs = self.debug_logger.get_log_content("main")
            main_text.insert(tk.END, main_logs)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
            detailed_text.delete(1.0, tk.END)
            detailed_logs = self.debug_logger.get_log_content("detailed")
            detailed_text.insert(tk.END, detailed_logs)
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
    
    def _clear_debug_logs(self, main_text, detailed_text):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã?\n"
                              "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."):
            try:
                self.debug_logger.clear_logs()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                main_text.delete(1.0, tk.END)
                detailed_text.delete(1.0, tk.END)
                
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–õ–æ–≥-—Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}")

    def auto_select_all_variants(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        try:
            if not hasattr(self, 'results_tree') or not self.results_tree.get_children():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞")
                return

            selected_count = 0
            total_materials = 0

            self.log_message("[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º)
            for material_item in self.results_tree.get_children():
                material_text = self.results_tree.item(material_item, 'text')
                total_materials += 1

                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–∞—Ä–∏–∞–Ω—Ç—ã)
                variants = self.results_tree.get_children(material_item)
                self.log_message(f"[DEBUG] –ú–∞—Ç–µ—Ä–∏–∞–ª '{material_text[:50]}...': –Ω–∞–π–¥–µ–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

                if variants:
                    # –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
                    best_variant = None
                    best_relevance = -1

                    for i, variant_item in enumerate(variants):
                        values = self.results_tree.item(variant_item, 'values')
                        self.log_message(f"[DEBUG]   –í–∞—Ä–∏–∞–Ω—Ç {i+1}: values length = {len(values)}")
                        if len(values) > 5:
                            self.log_message(f"[DEBUG]   –ó–Ω–∞—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {values}")
                            try:
                                relevance_str = str(values[5])  # –ò–Ω–¥–µ–∫—Å 5 - –∫–æ–ª–æ–Ω–∫–∞ relevance
                                self.log_message(f"[DEBUG]   –°—Ç—Ä–æ–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: '{relevance_str}'")

                                if relevance_str and relevance_str != '':
                                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª—ã
                                    relevance_clean = relevance_str.strip().replace('%', '')
                                    relevance = float(relevance_clean)
                                    self.log_message(f"[DEBUG]   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ: {relevance}")

                                    if relevance > best_relevance:
                                        best_relevance = relevance
                                        best_variant = variant_item
                                        self.log_message(f"[DEBUG]   –ù–æ–≤—ã–π –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é {relevance}")
                            except (ValueError, IndexError) as ex:
                                self.log_message(f"[DEBUG]   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {ex}")
                                continue

                    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                    if best_variant:
                        self.log_message(f"[DEBUG] –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é {best_relevance}")

                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –ª—É—á—à–µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
                            class FakeEvent:
                                def __init__(self):
                                    self.x = 0
                                    self.y = 0

                            fake_event = FakeEvent()

                            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                            self.handle_double_click(fake_event, best_variant)
                            selected_count += 1
                            self.log_message(f"[OK] –í–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                        except Exception as e:
                            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
                    else:
                        self.log_message(f"[DEBUG] –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

            self.log_message(f"[OK] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ {selected_count} –∏–∑ {total_materials} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ {selected_count} –∏–∑ {total_materials} –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–±–æ—Ä–µ: {e}")
            import traceback
            self.log_message(f"[ERROR] Traceback: {traceback.format_exc()}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–±–æ—Ä–µ: {str(e)}")

    def expand_all_materials(self):
        """–†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            if not hasattr(self, 'results_tree') or not self.results_tree.get_children():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è")
                return

            expanded_count = 0

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–º–∞—Ç–µ—Ä–∏–∞–ª—ã)
            for material_item in self.results_tree.get_children():
                if self.results_tree.get_children(material_item):  # –ï—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    self.results_tree.item(material_item, open=True)
                    expanded_count += 1

            self.log_message(f"[OK] –†–∞—Å–∫—Ä—ã—Ç–æ {expanded_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–†–∞—Å–∫—Ä—ã—Ç–æ {expanded_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}")

    def update_etm_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ ETM API"""
        try:
            if not hasattr(self, 'results_tree') or not self.results_tree.get_children():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")
                return

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–¥—ã ETM –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            etm_codes = self._collect_etm_codes()
            if not etm_codes:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã ETM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")
                return

            self.log_message(f"[INFO] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {len(etm_codes)} –∫–æ–¥–æ–≤ ETM...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=self._update_prices_thread,
                args=(etm_codes,),
                daemon=True
            ).start()

        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")


    def _collect_etm_codes(self):
        """–°–±–æ—Ä –≤—Å–µ—Ö –∫–æ–¥–æ–≤ ETM –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        etm_codes = set()
        total_rows_with_etm = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å ETM –∫–æ–¥–∞–º–∏
        all_etm_codes = []       # –í—Å–µ –∫–æ–¥—ã (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã)
        total_rows_checked = 0   # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫

        self.log_message(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä ETM –∫–æ–¥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")

        for material_item in self.results_tree.get_children():
            self.log_message(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª: {self.results_tree.item(material_item, 'text')}")
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            for variant_item in self.results_tree.get_children(material_item):
                total_rows_checked += 1
                values = self.results_tree.item(variant_item, 'values')
                self.log_message(f"[DEBUG]   –°—Ç—Ä–æ–∫–∞ {total_rows_checked}: values = {values}")

                if len(values) > 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ etm_code
                    etm_code = str(values[6]).strip()  # –ò–Ω–¥–µ–∫—Å 6 - —Å—Ç–æ–ª–±–µ—Ü –ö–û–î ETM
                    self.log_message(f"[DEBUG]   ETM –∫–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏–∏ 6: '{etm_code}'")

                    if etm_code and etm_code != '' and etm_code != '-':
                        etm_codes.add(etm_code)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
                        all_etm_codes.append(etm_code)  # –í—Å–µ –∫–æ–¥—ã
                        total_rows_with_etm += 1
                        self.log_message(f"[DEBUG]   ‚úì –ü—Ä–∏–Ω—è—Ç ETM –∫–æ–¥: {etm_code}")
                    else:
                        self.log_message(f"[DEBUG]   ‚úó –û—Ç–∫–ª–æ–Ω–µ–Ω ETM –∫–æ–¥: '{etm_code}' (–ø—É—Å—Ç–æ–π –∏–ª–∏ –ø—Ä–æ—á–µ—Ä–∫)")
                else:
                    self.log_message(f"[DEBUG]   ‚úó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(values)} (–Ω—É–∂–Ω–æ > 6)")

        self.log_message(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤—Å–µ–≥–æ: {total_rows_checked}")

        unique_count = len(etm_codes)
        self.log_message(f"[DEBUG] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ETM –∫–æ–¥–æ–≤:")
        self.log_message(f"[DEBUG]   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å ETM –∫–æ–¥–∞–º–∏: {total_rows_with_etm}")
        self.log_message(f"[DEBUG]   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ETM –∫–æ–¥–æ–≤: {unique_count}")

        if total_rows_with_etm != unique_count:
            self.log_message(f"[DEBUG]   –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´! –†–∞–∑–Ω–∏—Ü–∞: {total_rows_with_etm - unique_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            from collections import Counter
            code_counts = Counter(all_etm_codes)
            duplicates = {code: count for code, count in code_counts.items() if count > 1}
            if duplicates:
                self.log_message(f"[DEBUG]   –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {dict(list(duplicates.items())[:5])}")

        return list(etm_codes)

    def _update_prices_thread(self, etm_codes):
        """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ ETM API"""
        try:
            etm_service = get_etm_service()

            self.log_message(f"[DEBUG] ETM –∫–æ–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ({len(etm_codes)} —à—Ç.): {etm_codes[:5]}...")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–¥–∏–∞–ª–æ–≥
            self._show_progress_dialog("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω ETM", len(etm_codes))

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ETM API —Å–µ—Ä–≤–µ—Ä–∞
            self.log_message(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ETM API —Å–µ—Ä–≤–µ—Ä–∞...")
            if not etm_service.check_connectivity():
                error_msg = "ETM API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                self.log_message(f"[ERROR] {error_msg}")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", error_msg))
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã
            self.log_message(f"[DEBUG] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ ETM API...")
            prices = etm_service.get_prices(
                etm_codes,
                progress_callback=self._update_progress
            )

            self.log_message(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ETM API: {len(prices)} –∑–∞–ø–∏—Å–µ–π")
            if prices:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                successful_prices = {k: v for k, v in prices.items() if v.get('status') == 'success' and v.get('price', 0) > 0}
                failed_prices = {k: v for k, v in prices.items() if v.get('status') != 'success'}

                self.log_message(f"[DEBUG] –£—Å–ø–µ—à–Ω—ã—Ö —Ü–µ–Ω: {len(successful_prices)}, –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_prices)}")
                self.log_message(f"[DEBUG] –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö: {dict(list(successful_prices.items())[:2])}")
                if failed_prices:
                    self.log_message(f"[DEBUG] –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {dict(list(failed_prices.items())[:2])}")
            else:
                self.log_message(f"[DEBUG] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ETM API")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
            updated_count = self.root.after(0, self._apply_prices_to_table, prices)

        except Exception as e:
            from src.services.etm_api_service import EtmApiError
            if isinstance(e, EtmApiError):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É ETM API
                error_msg = f"–û—à–∏–±–∫–∞ ETM API: {str(e)}"
                self.log_message(f"[ERROR] {error_msg}")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ ETM API", str(e)))
            else:
                # –û–±—â–∞—è –æ—à–∏–±–∫–∞
                self.log_message(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
                import traceback
                self.log_message(f"[ERROR] Traceback: {traceback.format_exc()}")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}"))
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–¥–∏–∞–ª–æ–≥
            self.root.after(0, self._close_progress_dialog)

    def _show_progress_dialog(self, title, total):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_dialog = tk.Toplevel(self.root)
        self.progress_dialog.title(title)
        self.progress_dialog.geometry("400x120")
        self.progress_dialog.transient(self.root)
        self.progress_dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        self.progress_dialog.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 100,
            self.root.winfo_rooty() + 100
        ))

        frame = ttk.Frame(self.progress_dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)

        self.progress_label = ttk.Label(frame, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
        self.progress_label.pack(pady=(0, 10))

        self.progress_bar = ttk.Progressbar(frame, length=300, mode='determinate')
        self.progress_bar.pack(fill=tk.X)
        self.progress_bar['maximum'] = total

    def _update_progress(self, current, total, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        def update():
            if hasattr(self, 'progress_dialog') and self.progress_dialog.winfo_exists():
                self.progress_label.config(text=message)
                self.progress_bar['value'] = current

        self.root.after(0, update)

    def _close_progress_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if hasattr(self, 'progress_dialog'):
            self.progress_dialog.destroy()

    def _apply_prices_to_table(self, prices):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        rows_updated_with_prices = 0  # –°—Ç—Ä–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        rows_updated_with_dashes = 0  # –°—Ç—Ä–æ–∫ —Å –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏
        total_rows_processed = 0      # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        unique_codes_with_prices = set()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å —Ü–µ–Ω–∞–º–∏

        try:
            self.log_message(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ...")
            self.log_message(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API: {len(prices)}")

            for material_item in self.results_tree.get_children():
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                for variant_item in self.results_tree.get_children(material_item):
                    values = list(self.results_tree.item(variant_item, 'values'))
                    if len(values) > 7:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                        etm_code = str(values[6]).strip()  # –ò–Ω–¥–µ–∫—Å 6 - –ö–û–î ETM

                        if etm_code in prices:
                            total_rows_processed += 1
                            price_data = prices[etm_code]

                            if price_data['status'] == 'success' and price_data.get('price', 0) > 0:
                                # –ï—Å—Ç—å —Ü–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
                                new_price = f"{price_data['price']:.2f} {price_data['currency']}"
                                values[7] = new_price  # –ò–Ω–¥–µ–∫—Å 7 - —Å—Ç–æ–ª–±–µ—Ü —Ü–µ–Ω—ã
                                rows_updated_with_prices += 1
                                unique_codes_with_prices.add(etm_code)
                            else:
                                # –ù–µ—Ç —Ü–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—á–µ—Ä–∫
                                values[7] = "-"
                                rows_updated_with_dashes += 1

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
                            self.results_tree.item(variant_item, values=values)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            unique_codes_requested = len(prices)
            unique_codes_with_prices_count = len(unique_codes_with_prices)

            self.log_message(f"[OK] –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            self.log_message(f"[OK]   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {unique_codes_requested}")
            self.log_message(f"[OK]   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {unique_codes_with_prices_count}")
            self.log_message(f"[OK]   –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_rows_processed}")
            self.log_message(f"[OK]   –°—Ç—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Ü–µ–Ω–∞–º–∏: {rows_updated_with_prices}")
            self.log_message(f"[OK]   –°—Ç—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω–æ –ø—Ä–æ—á–µ—Ä–∫–æ–º: {rows_updated_with_dashes}")

            # –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ –∫–æ–¥–∞–º–∏
            if total_rows_processed > unique_codes_requested:
                self.log_message(f"[INFO] –í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–æ–≤ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

            if rows_updated_with_prices > 0:
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ",
                    f"–ü–æ–ª—É—á–µ–Ω–æ {unique_codes_with_prices_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ ETM API\n" +
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {rows_updated_with_prices} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ\n" +
                    f"(–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_rows_processed} —Å—Ç—Ä–æ–∫, {rows_updated_with_dashes} –±–µ–∑ —Ü–µ–Ω)")
            else:
                messagebox.showwarning("–†–µ–∑—É–ª—å—Ç–∞—Ç",
                    f"–¶–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n" +
                    f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {unique_codes_requested} –∫–æ–¥–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_rows_processed} —Å—Ç—Ä–æ–∫\n" +
                    f"–í—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏")

        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")

    def auto_load_on_startup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        self.log_message("[INFO] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
        
        materials_dir = Path("./material")
        pricelist_dir = Path("./price-list")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
        materials_exists = materials_dir.exists() and any(materials_dir.iterdir())
        pricelist_exists = pricelist_dir.exists() and any(pricelist_dir.iterdir())
        
        if not materials_exists and not pricelist_exists:
            self.log_message("[INFO] –ü–∞–ø–∫–∏ material –∏ price-list –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return
        
        def auto_load_thread():
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
                if materials_exists:
                    self.root.after(0, lambda: self.status_var.set("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."))
                    self.load_materials_from_directory(materials_dir)
                    self.root.after(0, lambda: self.log_message("[OK] –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"))
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
                import time
                time.sleep(0.5)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
                if pricelist_exists:
                    self.root.after(0, lambda: self.status_var.set("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤..."))
                    self.load_pricelist_from_directory(pricelist_dir)
                    self.root.after(0, lambda: self.log_message("[OK] –ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"))
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
                time.sleep(1.0)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if self.materials or self.price_items:
                    self.root.after(0, lambda: self.log_message("[INFO] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏..."))
                    self.root.after(0, lambda: self.index_data(show_warning=False))
                    self.root.after(0, lambda: self.log_message("[OK] –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"))
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                    time.sleep(2.0)
                    self.root.after(0, self.update_start_button_state)
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
                    self.root.after(3000, self.update_start_button_state)
                else:
                    self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤"))
                    
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}"))
                self.root.after(0, lambda: self.status_var.set("–û—à–∏–±–∫–∞"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=auto_load_thread, daemon=True).start()

    # –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
    
    # –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º


def main():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        root = tk.Tk()
        app = MaterialMatcherGUI(root)
        root.mainloop()
    except Exception as e:
        print(f"[ERROR] GUI crashed: {e}")
        import traceback
        traceback.print_exc()
        input("Press Enter to exit...")


if __name__ == "__main__":
    main()