#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""

import sys
import os
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp


def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        app = MaterialMatcherApp()
        print("‚úì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...")
    if app.es_service.check_connection():
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚úó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Elasticsearch –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:9200")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    if app.setup_indices():
        print("‚úì –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
    materials_path = "data/sample/materials.csv"
    price_list_path = "data/sample/price_list.csv"
    
    if not Path(materials_path).exists():
        print(f"‚úó –§–∞–π–ª {materials_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not Path(price_list_path).exists():
        print(f"‚úó –§–∞–π–ª {price_list_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    materials = app.load_materials(materials_path)
    price_items = app.load_price_list(price_list_path)
    
    if not materials:
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        return False
    
    if not price_items:
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
        return False
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(price_items)} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
    
    # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\n5. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Elasticsearch...")
    if app.index_data(materials, price_items):
        print("‚úì –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚úó –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print("   –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print("\n6. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
    start_time = time.time()
    
    results = app.run_matching(materials)
    
    end_time = time.time()
    
    if results:
        print(f"‚úì –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_materials = len(results)
        materials_with_matches = sum(1 for matches in results.values() if matches)
        total_matches = sum(len(matches) for matches in results.values())
        
        print(f"   –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}")
        print(f"   –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {materials_with_matches}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {total_matches}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ª—É—á—à–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        print("\n7. –ü—Ä–∏–º–µ—Ä—ã –ª—É—á—à–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:")
        shown = 0
        for material_id, matches in results.items():
            if matches and shown < 3:
                best_match = max(matches, key=lambda x: x.similarity_percentage)
                print(f"\n   –ú–∞—Ç–µ—Ä–∏–∞–ª: {best_match.material.name}")
                print(f"   –ù–∞–π–¥–µ–Ω: {best_match.price_item.material_name}")
                print(f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {best_match.price_item.supplier}")
                print(f"   –¶–µ–Ω–∞: {best_match.price_item.price} {best_match.price_item.currency}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏: {best_match.similarity_percentage:.1f}%")
                print(f"   –î–µ—Ç–∞–ª–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏:")
                for detail, value in best_match.similarity_details.items():
                    print(f"     - {detail}: {value:.1f}%")
                shown += 1
        
    else:
        print("‚úó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return False
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n8. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        app.export_results(results, "test_results.json", "json")
        print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ test_results.json")
        
        app.export_results(results, "test_results.csv", "csv")
        print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ test_results.csv")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    print("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! ===")
    return True


def test_individual_material():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===\n")
    
    try:
        app = MaterialMatcherApp()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
        es_materials = app.es_service.get_all_materials()
        if not es_materials:
            print("‚úó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        material_id = es_materials[0]['_id']
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª ID: {material_id}")
        
        # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        matches = app.get_material_matches(material_id, top_n=3)
        
        if matches:
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:")
            for i, match in enumerate(matches, 1):
                print(f"\n   {i}. {match['price_item']['material_name']}")
                print(f"      –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['price_item']['supplier']}")
                print(f"      –¶–µ–Ω–∞: {match['price_item']['price']} {match['price_item']['currency']}")
                print(f"      –ü–æ—Ö–æ–∂–µ—Å—Ç—å: {match['similarity_percentage']:.1f}%")
        else:
            print("‚úó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print("‚úì –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...\n")
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    basic_test_success = test_basic_functionality()
    
    if basic_test_success:
        # –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        individual_test_success = test_individual_material()
        
        if individual_test_success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("python main.py --materials <–ø—É—Ç—å_–∫_–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º> --price-list <–ø—É—Ç—å_–∫_–ø—Ä–∞–π—Å—É> --setup")
        else:
            print("\n‚ö†Ô∏è  –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
    else:
        print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–ª–∏—á–∏–µ Elasticsearch")


if __name__ == '__main__':
    main()