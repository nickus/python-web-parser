#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Excel —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–∞—à–∏ —Ñ–∞–π–ª—ã material.xlsx –∏ pricelist.xlsx –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
"""

import pandas as pd
import json
from pathlib import Path
import sys

def convert_materials_file():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ material.xlsx –≤ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é material.xlsx...")
        df = pd.read_excel('material.xlsx')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–ø–æ –∏–Ω–¥–µ–∫—Å—É 0)
        name_column = df.columns[0]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∏—Å—Ç–µ–º—ã
        materials = []
        for index, row in df.iterrows():
            material_name = str(row[name_column]).strip()
            if material_name and material_name != 'nan':
                material = {
                    'id': str(index + 1),
                    'name': material_name,
                    'description': material_name,
                    'category': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                    'brand': '',
                    'model': '',
                    'unit': '—à—Ç',
                    'specifications': '{}'
                }
                materials.append(material)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        materials_df = pd.DataFrame(materials)
        materials_df.to_csv('materials_converted.csv', index=False, encoding='utf-8')
        
        print(f"[OK] –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª materials_converted.csv —Å {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")
        return materials
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ material.xlsx: {e}")
        return []

def convert_pricelist_file():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ pricelist.xlsx –≤ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é pricelist.xlsx...")
        df = pd.read_excel('pricelist.xlsx')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        columns = df.columns.tolist()
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
        
        # ID - –∫–æ–ª–æ–Ω–∫–∞ 0, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –∫–æ–ª–æ–Ω–∫–∞ 1, –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å - –∫–æ–ª–æ–Ω–∫–∞ 2, –∏ —Ç.–¥.
        id_col = columns[0]
        name_col = columns[1] 
        manufacturer_col = columns[2] if len(columns) > 2 else None
        manufacturer_code_col = columns[3] if len(columns) > 3 else None
        article_col = columns[4] if len(columns) > 4 else None
        tru_code_col = columns[5] if len(columns) > 5 else None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∏—Å—Ç–µ–º—ã
        price_items = []
        for index, row in df.iterrows():
            # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            name = str(row[name_col]).strip() if pd.notna(row[name_col]) else ''
            manufacturer = str(row[manufacturer_col]).strip() if manufacturer_col and pd.notna(row[manufacturer_col]) else ''
            manufacturer_code = str(row[manufacturer_code_col]).strip() if manufacturer_code_col and pd.notna(row[manufacturer_code_col]) else ''
            article = str(row[article_col]).strip() if article_col and pd.notna(row[article_col]) else ''
            tru_code = str(row[tru_code_col]).strip() if tru_code_col and pd.notna(row[tru_code_col]) else ''
            
            if not name or name == 'nan':
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            
            price_item = {
                'id': str(row[id_col]),
                'material_name': name,
                'description': name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
                'price': 0.0,  # –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ
                'currency': 'RUB',
                'supplier': manufacturer if manufacturer and manufacturer != 'nan' else '–ù–µ —É–∫–∞–∑–∞–Ω',
                'category': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                'brand': manufacturer if manufacturer and manufacturer != 'nan' else '',
                'unit': '—à—Ç',
                'specifications': json.dumps({
                    'manufacturer_code': manufacturer_code if manufacturer_code != 'nan' else '',
                    'article': article if article != 'nan' else '',
                    'tru_code': tru_code if tru_code != 'nan' else ''
                }, ensure_ascii=False)
            }
            price_items.append(price_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        pricelist_df = pd.DataFrame(price_items)
        pricelist_df.to_csv('pricelist_converted.csv', index=False, encoding='utf-8')
        
        print(f"[OK] –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pricelist_converted.csv —Å {len(price_items)} –ø–æ–∑–∏—Ü–∏—è–º–∏")
        return price_items
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pricelist.xlsx: {e}")
        return []

def show_preview(materials, price_items):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("="*60)
    
    if materials:
        print(f"\n[MATERIALS] –ú–ê–¢–ï–†–ò–ê–õ–´ (–≤—Å–µ–≥–æ {len(materials)}):")
        print("-" * 40)
        for i, material in enumerate(materials[:5], 1):
            print(f"{i}. {material['name']}")
        if len(materials) > 5:
            print(f"... –∏ –µ—â–µ {len(materials) - 5} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    if price_items:
        print(f"\n[PRICELIST] –ü–†–ê–ô–°-–õ–ò–°–¢ (–≤—Å–µ–≥–æ {len(price_items)}):")
        print("-" * 40)
        for i, item in enumerate(price_items[:5], 1):
            supplier_info = f" ({item['supplier']})" if item['supplier'] != '–ù–µ —É–∫–∞–∑–∞–Ω' else ""
            print(f"{i}. {item['material_name']}{supplier_info}")
        if len(price_items) > 5:
            print(f"... –∏ –µ—â–µ {len(price_items) - 5} –ø–æ–∑–∏—Ü–∏–π")

def create_test_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    script_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.material_matcher_app import MaterialMatcherApp

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –í–ê–®–ò–• –§–ê–ô–õ–û–í")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = MaterialMatcherApp()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch
    if not app.es_service.check_connection():
        print("‚ùå Elasticsearch –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e 'discovery.type=single-node' -e 'xpack.security.enabled=false' elasticsearch:8.15.1")
        return False
    
    print("‚úÖ Elasticsearch –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    if not app.setup_indices():
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
    materials = app.load_materials('materials_converted.csv')
    if not materials:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return False
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    print("üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞...")
    price_items = app.load_price_list('pricelist_converted.csv')
    if not price_items:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
        return False
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(price_items)} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")
    
    # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    print("üîÑ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    if not app.index_data(materials, price_items):
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        return False
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
    results = app.run_matching(materials)
    
    if not results:
        print("‚ùå –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return False
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_materials = len(results)
    materials_with_matches = sum(1 for matches in results.values() if matches)
    total_matches = sum(len(matches) for matches in results.values())
    
    print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}")
    print(f"   –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {materials_with_matches}")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {total_matches}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {materials_with_matches/total_materials*100:.1f}%")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\\nüèÜ –õ–£–ß–®–ò–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
    print("-" * 50)
    
    best_results = []
    for material_id, matches in results.items():
        if matches:
            best_match = max(matches, key=lambda x: x.similarity_percentage)
            material = next(m for m in materials if m.id == material_id)
            best_results.append((material, best_match))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
    best_results.sort(key=lambda x: x[1].similarity_percentage, reverse=True)
    
    for i, (material, best_match) in enumerate(best_results[:10], 1):
        print(f"\\n{i}. –ò–°–ö–ê–õ–ò: {material.name}")
        print(f"   –ù–ê–ô–î–ï–ù–û: {best_match.price_item.material_name}")
        print(f"   –ü–û–°–¢–ê–í–©–ò–ö: {best_match.price_item.supplier}")
        print(f"   –ü–û–•–û–ñ–ï–°–¢–¨: {best_match.similarity_percentage:.1f}%")
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_file = "your_matching_results.json"
    app.export_results(results, output_file)
    print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
'''
    
    with open('test_your_files.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç test_your_files.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("[INFO] –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø EXCEL –§–ê–ô–õ–û–í")
    print("="*40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if not Path('material.xlsx').exists():
        print("‚ùå –§–∞–π–ª material.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    if not Path('pricelist.xlsx').exists():
        print("‚ùå –§–∞–π–ª pricelist.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    materials = convert_materials_file()
    price_items = convert_pricelist_file()
    
    if not materials or not price_items:
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
        return False
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    show_preview(materials, price_items)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    create_test_script()
    
    print("\n" + "="*60)
    print("‚úÖ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Elasticsearch –∑–∞–ø—É—â–µ–Ω:")
    print("   docker ps | grep elasticsearch")
    print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("   python test_your_files.py")
    print("\n3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GUI:")
    print("   python main.py --gui")
    print("   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ materials_converted.csv –∫–∞–∫ —Ñ–∞–π–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print("   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ pricelist_converted.csv –∫–∞–∫ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
    
    return True

if __name__ == "__main__":
    main()