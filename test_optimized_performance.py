#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
"""

import sys
import os
import time
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.models.material import Material, PriceListItem
from src.services.elasticsearch_service import ElasticsearchService
from src.services.elasticsearch_service_optimized import OptimizedElasticsearchService
from src.services.similarity_service import SimilarityService
from src.services.fast_similarity_service import FastSimilarityService
from src.services.matching_service import MaterialMatchingService
from src.services.optimized_matching_service import OptimizedMatchingService
from src.utils.data_loader_fixed import MaterialLoader, PriceListLoader

print("=" * 80)
print("–°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: –°–¢–ê–†–ê–Ø vs –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
print("=" * 80)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
materials = MaterialLoader.load_from_csv("data/sample/materials.csv")
price_items = PriceListLoader.load_from_csv("data/sample/price_list.csv")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, {len(price_items)} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
print("\n" + "=" * 80)
print("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–ê–†–û–ô –°–ò–°–¢–ï–ú–´")
print("=" * 80)

old_es = ElasticsearchService()
old_similarity = SimilarityService()
old_matching = MaterialMatchingService(old_es, old_similarity)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
print("\n" + "=" * 80)
print("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
print("=" * 80)

new_es = OptimizedElasticsearchService()
fast_similarity = FastSimilarityService()
optimized_matching = OptimizedMatchingService(new_es, fast_similarity)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if not old_es.check_connection():
    print("‚ùå Elasticsearch –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    sys.exit(1)

print("‚úì Elasticsearch –ø–æ–¥–∫–ª—é—á–µ–Ω")

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
test_query = "–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π LED 36–í—Ç"
test_material = Material(
    id="test1",
    name=test_query,
    manufacturer="–°–≤–µ—Ç–æ–≤—ã–µ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    equipment_code="LED-36W"
)

# –¢–ï–°–¢ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ Elasticsearch
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 1: –ü–û–ò–°–ö –í ELASTICSEARCH")
print("=" * 80)

# –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
start = time.time()
old_es_results = old_es.search_price_list(test_query, size=20)
old_es_time = time.time() - start
print(f"–°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞: {old_es_time:.3f} —Å–µ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(old_es_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å)
print("\n–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
new_es.create_optimized_price_list_index()
new_es.index_price_list_optimized(price_items)

start = time.time()
new_es_results = new_es.search_price_list_optimized(test_query, size=20)
new_es_time = time.time() - start
print(f"–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {new_es_time:.3f} —Å–µ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(new_es_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

speedup = old_es_time / new_es_time if new_es_time > 0 else 0
print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

# –¢–ï–°–¢ 2: –†–∞—Å—á–µ—Ç similarity
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 2: –†–ê–°–ß–ï–¢ SIMILARITY (10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
print("=" * 80)

test_items = price_items[:10]

# –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
start = time.time()
for item in test_items:
    old_similarity.calculate_new_material_similarity(test_material, item)
old_sim_time = time.time() - start
print(f"–°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞: {old_sim_time:.3f} —Å–µ–∫ ({old_sim_time/10:.4f} —Å–µ–∫/—ç–ª–µ–º–µ–Ω—Ç)")

# –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
start = time.time()
for item in test_items:
    fast_similarity.calculate_fast_similarity(test_material, item)
new_sim_time = time.time() - start
print(f"–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {new_sim_time:.3f} —Å–µ–∫ ({new_sim_time/10:.4f} —Å–µ–∫/—ç–ª–µ–º–µ–Ω—Ç)")

speedup = old_sim_time / new_sim_time if new_sim_time > 0 else 0
print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

# –¢–ï–°–¢ 3: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 3: –ü–û–õ–ù–´–ô –ü–†–û–¶–ï–°–° –ü–û–ò–°–ö–ê")
print("=" * 80)

# –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –ë–ï–ó bypass mode
print("\n–°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (Elasticsearch mode):")
start = time.time()
old_results = old_matching.match_material_with_price_list(
    test_material,
    similarity_threshold=10.0,
    max_results=5
)
old_total_time = time.time() - start
print(f"–í—Ä–µ–º—è: {old_total_time:.3f} —Å–µ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(old_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –ù–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
print("\n–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):")
start = time.time()
new_results = optimized_matching.match_material_with_price_list(
    test_material,
    similarity_threshold=10.0,
    max_results=5,
    es_top_n=20
)
new_total_time = time.time() - start
print(f"–í—Ä–µ–º—è: {new_total_time:.3f} —Å–µ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(new_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

speedup = old_total_time / new_total_time if new_total_time > 0 else 0
print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

# –í—ã–≤–æ–¥ —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if new_results:
    print("\n–¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞):")
    for i, result in enumerate(new_results[:3], 1):
        print(f"  {i}. {result.price_item.name[:50]:50} - {result.similarity_percentage:.1f}%")

# –¢–ï–°–¢ 4: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
print("\n" + "=" * 80)
print("–¢–ï–°–¢ 4: –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê (5 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)")
print("=" * 80)

batch_materials = materials[:5]

# –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
print("\n–°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞:")
start = time.time()
old_batch = old_matching.match_materials_batch(
    batch_materials,
    similarity_threshold=20.0,
    max_results_per_material=3,
    max_workers=2
)
old_batch_time = time.time() - start
print(f"–í—Ä–µ–º—è: {old_batch_time:.3f} —Å–µ–∫ ({old_batch_time/5:.3f} —Å–µ–∫/–º–∞—Ç–µ—Ä–∏–∞–ª)")

# –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
print("\n–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")
start = time.time()
new_batch = optimized_matching.match_materials_batch(
    batch_materials,
    similarity_threshold=20.0,
    max_results_per_material=3,
    max_workers=2
)
new_batch_time = time.time() - start
print(f"–í—Ä–µ–º—è: {new_batch_time:.3f} —Å–µ–∫ ({new_batch_time/5:.3f} —Å–µ–∫/–º–∞—Ç–µ—Ä–∏–∞–ª)")

speedup = old_batch_time / new_batch_time if new_batch_time > 0 else 0
print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

# –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
print("\n" + "=" * 80)
print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("=" * 80)

print("\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:")
print(f"‚îú‚îÄ –ü–æ–∏—Å–∫ –≤ Elasticsearch: {old_es_time:.3f}s ‚Üí {new_es_time:.3f}s")
print(f"‚îú‚îÄ –†–∞—Å—á–µ—Ç similarity (10): {old_sim_time:.3f}s ‚Üí {new_sim_time:.3f}s")
print(f"‚îú‚îÄ –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫: {old_total_time:.3f}s ‚Üí {new_total_time:.3f}s")
print(f"‚îî‚îÄ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (5): {old_batch_time:.3f}s ‚Üí {new_batch_time:.3f}s")

avg_speedup = (
    (old_es_time / new_es_time if new_es_time > 0 else 0) +
    (old_sim_time / new_sim_time if new_sim_time > 0 else 0) +
    (old_total_time / new_total_time if new_total_time > 0 else 0) +
    (old_batch_time / new_batch_time if new_batch_time > 0 else 0)
) / 4

print(f"\nüöÄ –°–†–ï–î–ù–ï–ï –£–°–ö–û–†–ï–ù–ò–ï: {avg_speedup:.1f}x")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞):")
cache_stats = optimized_matching.get_cache_stats()
for key, value in cache_stats.items():
    print(f"  {key}: {value}")

print("\n" + "=" * 80)
print("–í–´–í–û–î–´")
print("=" * 80)

if avg_speedup > 10:
    print("‚úÖ –û–¢–õ–ò–ß–ù–û! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!")
elif avg_speedup > 5:
    print("‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.")
elif avg_speedup > 2:
    print("‚úÖ –ù–ï–ü–õ–û–•–û! –ï—Å—Ç—å –∑–∞–º–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
else:
    print("‚ö†Ô∏è  –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ.")

if new_total_time < 1.0:
    print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
elif new_total_time < 3.0:
    print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è.")
else:
    print("‚ö†Ô∏è  –ü–æ–∏—Å–∫ –≤—Å–µ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.")