#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã timer-based double-click detection
"""

import tkinter as tk
from tkinter import ttk
import time

class TimerDoubleClickTest:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢–µ—Å—Ç Timer-Based Double Click")
        self.root.geometry("500x400")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.last_click_time = 0
        self.last_click_item = None
        self.double_click_delay = 500  # –º—Å–µ–∫
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        self.tree = ttk.Treeview(root, columns=("col1", "col2"), show="tree headings")
        self.tree.heading("#0", text="–ú–∞—Ç–µ—Ä–∏–∞–ª")
        self.tree.heading("col1", text="–í–∞—Ä–∏–∞–Ω—Ç")
        self.tree.heading("col2", text="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        parent = self.tree.insert("", tk.END, text="–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", tags=("material",))
        for i in range(3):
            child = self.tree.insert(parent, tk.END, 
                values=(f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}", f"{95-i*5}%"),
                tags=("high", f"variant_test_{i+1}"))
        
        # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        self.tree.item(parent, open=True)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞—à —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.tree.bind("<Button-1>", self.on_smart_click)
        
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = tk.Text(root, height=8)
        self.log_text.pack(fill=tk.BOTH, padx=10, pady=5)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = tk.Label(root, text="–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º!\n–û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ = –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–ë—ã—Å—Ç—Ä–æ –¥–≤–∞ –∫–ª–∏–∫–∞ = –î–í–û–ô–ù–û–ô –ö–õ–ò–ö!")
        instruction.pack(padx=10, pady=5)
        
        self.log("=== Timer-Based Double Click Test ===")
        self.log("–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}\n")
        self.log_text.see(tk.END)
        print(message)
    
    def on_smart_click(self, event):
        """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∏ –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            item = self.tree.identify('item', event.x, event.y)
            current_time = int(time.time() * 1000)  # –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if not item:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
            if (item == self.last_click_item and 
                current_time - self.last_click_time < self.double_click_delay):
                
                # –≠—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫!
                self.log("üî• –î–í–û–ô–ù–û–ô –ö–õ–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù! (timer-based detection)")
                self.handle_double_click(event, item)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–∫–∞
                self.last_click_item = None
                self.last_click_time = 0
                
            else:
                # –≠—Ç–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫
                self.last_click_item = item
                self.last_click_time = current_time
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–∏–Ω–∞—Ä–Ω–æ–º –∫–ª–∏–∫–µ
                item_text = self.tree.item(item, 'text')
                item_values = self.tree.item(item, 'values')
                parent = self.tree.parent(item)
                
                if parent:
                    self.log(f"üñ±Ô∏è –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: {item_values}")
                else:
                    self.log(f"üñ±Ô∏è –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É: {item_text}")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_double_click(self, event, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        try:
            parent = self.tree.parent(item)
            if not parent:
                self.log("‚ÑπÔ∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–Ω–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É)")
                return
            
            item_values = self.tree.item(item, 'values')
            self.log(f"‚úÖ –í–´–ë–†–ê–ù –í–ê–†–ò–ê–ù–¢: {item_values[0]} —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é {item_values[1]}")
            
            # –í–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            self.tree.item(item, tags=("selected",))
            self.tree.tag_configure("selected", background="lightgreen", font=('Arial', 10, 'bold'))
            
            # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            for child in self.tree.get_children(parent):
                if child != item:
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–π
                    current_tags = list(self.tree.item(child, 'tags'))
                    current_tags.append("hidden")
                    self.tree.item(child, tags=current_tags)
                    
            self.tree.tag_configure("hidden", foreground="gray")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = TimerDoubleClickTest(root)
    root.mainloop()